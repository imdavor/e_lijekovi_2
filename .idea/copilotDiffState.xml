<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/e_lijekovi_2/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/e_lijekovi_2/MainActivity.kt" />
              <option name="originalContent" value="package com.example.e_lijekovi_2&#10;&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.content.Context&#10;import android.content.pm.PackageManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.animation.core.spring&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.viewinterop.AndroidView&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.example.e_lijekovi_2.ui.theme.E_lijekovi_2Theme&#10;import com.example.e_lijekovi_2.ui.components.LijekCard&#10;import kotlinx.coroutines.launch&#10;&#10;// Helper functions for interval therapy calculations&#10;private fun calculateRemainingDoses(interval: IntervalnoUzimanje): Int {&#10;    val takenCount = interval.complianceHistory.size&#10;    return maxOf(0, interval.ukupnoUzimanja - takenCount)&#10;}&#10;&#10;private fun calculateNextDose(interval: IntervalnoUzimanje): String? {&#10;    // Scan scheduled times generated by IntervalnoUzimanje for today and following days&#10;    val now = java.util.Calendar.getInstance()&#10;    val dateFormat = java.text.SimpleDateFormat(&quot;dd-MM-yyyy&quot;, java.util.Locale.getDefault())&#10;    val dateTimeFormat = java.text.SimpleDateFormat(&quot;dd-MM-yyyy HH:mm&quot;, java.util.Locale.getDefault())&#10;&#10;    // Check up to the therapy duration days starting from today&#10;    for (dayOffset in 0 until interval.trajanjeDana) {&#10;        val cal = java.util.Calendar.getInstance()&#10;        cal.add(java.util.Calendar.DAY_OF_YEAR, dayOffset)&#10;        val dateStr = dateFormat.format(cal.time)&#10;        val times = interval.generirajVremenaZaDan(dateStr)&#10;&#10;        for (t in times) {&#10;            val parts = t.split(&quot;:&quot;)&#10;            if (parts.size &lt; 2) continue&#10;            val candidate = java.util.Calendar.getInstance()&#10;            candidate.time = cal.time&#10;            candidate.set(java.util.Calendar.HOUR_OF_DAY, parts[0].toInt())&#10;            candidate.set(java.util.Calendar.MINUTE, parts[1].toInt())&#10;            candidate.set(java.util.Calendar.SECOND, 0)&#10;            candidate.set(java.util.Calendar.MILLISECOND, 0)&#10;&#10;            if (candidate.timeInMillis &gt; now.timeInMillis) {&#10;                return dateTimeFormat.format(candidate.time)&#10;            }&#10;        }&#10;    }&#10;&#10;    return null&#10;}&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private lateinit var requestNotificationPermissionLauncher: ActivityResultLauncher&lt;String&gt;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        // Register permission launcher&#10;        requestNotificationPermissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted -&gt;&#10;            // No-op here; NotificationReceiver checks permission when posting&#10;        }&#10;&#10;        // Create notification channel&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val name = &quot;Podsjetnici&quot;&#10;            val descriptionText = &quot;Channel for medicine reminders&quot;&#10;            val importance = NotificationManager.IMPORTANCE_DEFAULT&#10;            val channel = NotificationChannel(NotificationScheduler.CHANNEL_ID, name, importance).apply {&#10;                description = descriptionText&#10;            }&#10;            val notificationManager: NotificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;&#10;        // Request POST_NOTIFICATIONS permission on Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            val permission = android.Manifest.permission.POST_NOTIFICATIONS&#10;            if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {&#10;                requestNotificationPermissionLauncher.launch(permission)&#10;            }&#10;        }&#10;&#10;        // Schedule reminders from saved prefs&#10;        val prefs = getSharedPreferences(&quot;e_lijekovi_prefs&quot;, Context.MODE_PRIVATE)&#10;        prefs.getString(&quot;reminder_jutro&quot;, null)?.let {&#10;            NotificationScheduler.scheduleDailyReminder(this, it, &quot;Jutro&quot;)&#10;        }&#10;        prefs.getString(&quot;reminder_podne&quot;, null)?.let {&#10;            NotificationScheduler.scheduleDailyReminder(this, it, &quot;Podne&quot;)&#10;        }&#10;        prefs.getString(&quot;reminder_vecer&quot;, null)?.let {&#10;            NotificationScheduler.scheduleDailyReminder(this, it, &quot;Večer&quot;)&#10;        }&#10;&#10;        setContent {&#10;            E_lijekovi_2Theme(&#10;                darkTheme = isSystemInDarkTheme(), // Eksplicitno koristimo system dark theme&#10;                dynamicColor = false // Onemogućeno da se forsiraju naše custom boje&#10;            ) {&#10;                PocetniEkran(context = this)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Dialog za dodavanje/uređivanje lijeka&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LijekDialog(&#10;    lijek: Lijek?,&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (Lijek) -&gt; Unit,&#10;    onDelete: (Lijek) -&gt; Unit&#10;) {&#10;    var naziv by remember { mutableStateOf(lijek?.naziv ?: &quot;&quot;) }&#10;    var doza by remember { mutableStateOf(lijek?.doza ?: &quot;&quot;) }&#10;    var jutro by remember { mutableStateOf(lijek?.jutro ?: false) }&#10;    var popodne by remember { mutableStateOf(lijek?.popodne ?: false) }&#10;    var vecer by remember { mutableStateOf(lijek?.vecer ?: false) }&#10;    var pakiranje by remember { mutableStateOf(lijek?.pakiranje?.toString() ?: &quot;30&quot;) }&#10;    var trenutnoStanje by remember { mutableStateOf(lijek?.trenutnoStanje?.toString() ?: &quot;30&quot;) }&#10;    var cijena by remember { mutableStateOf(lijek?.cijena ?: &quot;&quot;) }&#10;&#10;    var showIntervalDialog by remember { mutableStateOf(false) }&#10;    var showDeleteConfirm by remember { mutableStateOf(false) }&#10;&#10;    // KARTICA: Uredi lijek / Dodaj lijek&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(if (lijek == null) &quot;Dodaj lijek&quot; else &quot;Uredi lijek&quot;) },&#10;        text = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                modifier = Modifier.verticalScroll(rememberScrollState())&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = naziv,&#10;                    onValueChange = { naziv = it },&#10;                    label = { Text(&quot;Naziv lijeka&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = pakiranje,&#10;                        onValueChange = { pakiranje = it },&#10;                        label = { Text(&quot;Pak.&quot;) },&#10;                        placeholder = { Text(&quot;30&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    OutlinedTextField(&#10;                        value = doza,&#10;                        onValueChange = { doza = it },&#10;                        label = { Text(&quot;Doza&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    OutlinedTextField(&#10;                        value = trenutnoStanje,&#10;                        onValueChange = { trenutnoStanje = it },&#10;                        label = { Text(&quot;Stanje&quot;) },&#10;                        placeholder = { Text(&quot;30&quot;) },&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;                OutlinedTextField(&#10;                    value = cijena,&#10;                    onValueChange = { cijena = it },&#10;                    label = { Text(&quot;Cijena (opcionalno)&quot;) },&#10;                    singleLine = true,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Text(&quot;Vrijeme uzimanja:&quot;, fontWeight = FontWeight.Medium)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Jutro&#10;                    Card(&#10;                        onClick = { jutro = !jutro },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = if (jutro) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),&#10;                            contentColor = MaterialTheme.colorScheme.onSurface&#10;                        ),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 10.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(2.dp)&#10;                        ) {&#10;                            Text(&quot;&quot;, fontSize = 28.sp)&#10;                            Text(&quot;Jutro&quot;, fontSize = 13.sp, fontWeight = FontWeight.Medium)&#10;                            Text(&#10;                                if (jutro) &quot;Uključeno&quot; else &quot;Isključeno&quot;,&#10;                                fontSize = 11.sp,&#10;                                fontWeight = if (jutro) FontWeight.Bold else FontWeight.Normal,&#10;                                color = if (jutro) MaterialTheme.colorScheme.primary else Color.Gray&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Podne&#10;                    Card(&#10;                        onClick = { popodne = !popodne },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = if (popodne) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),&#10;                            contentColor = MaterialTheme.colorScheme.onSurface&#10;                        ),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 10.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(2.dp)&#10;                        ) {&#10;                            Text(&quot;☀️&quot;, fontSize = 28.sp)&#10;                            Text(&quot;Podne&quot;, fontSize = 13.sp, fontWeight = FontWeight.Medium)&#10;                            Text(&#10;                                if (popodne) &quot;Uključeno&quot; else &quot;Isključeno&quot;,&#10;                                fontSize = 11.sp,&#10;                                fontWeight = if (popodne) FontWeight.Bold else FontWeight.Normal,&#10;                                color = if (popodne) MaterialTheme.colorScheme.primary else Color.Gray&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Večer&#10;                    Card(&#10;                        onClick = { vecer = !vecer },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = if (vecer) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),&#10;                            contentColor = MaterialTheme.colorScheme.onSurface&#10;                        ),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 10.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(2.dp)&#10;                        ) {&#10;                            Text(&quot;&quot;, fontSize = 28.sp)&#10;                            Text(&quot;Večer&quot;, fontSize = 13.sp, fontWeight = FontWeight.Medium)&#10;                            Text(&#10;                                if (vecer) &quot;Uključeno&quot; else &quot;Isključeno&quot;,&#10;                                fontSize = 11.sp,&#10;                                fontWeight = if (vecer) FontWeight.Bold else FontWeight.Normal,&#10;                                color = if (vecer) MaterialTheme.colorScheme.primary else Color.Gray&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Jednostavan gumb za intervalnu terapiju&#10;                if (lijek != null) {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Button(&#10;                        onClick = { showIntervalDialog = true },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    ) {&#10;                        Icon(Icons.Default.Schedule, contentDescription = null)&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;⏰ Postavi intervalno uzimanje&quot;)&#10;                    }&#10;&#10;                    // Prikaz trenutne intervalne terapije&#10;                    if (lijek.tipUzimanja == TipUzimanja.INTERVALNO &amp;&amp; lijek.intervalnoUzimanje != null) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surfaceVariant,&#10;                                contentColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            ),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp)&#10;                            ) {&#10;                                Text(&#10;                                    &quot;⏰ Aktivna intervalna terapija:&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.secondary&#10;                                )&#10;                                val interval = lijek.intervalnoUzimanje&#10;                                Text(&quot; ${interval.ukupnoUzimanja} kom, svakih ${interval.intervalSati}h&quot;)&#10;&#10;                                val preostalo = calculateRemainingDoses(interval)&#10;                                Text(&quot;⏳ Preostalo: $preostalo uzimanja&quot;)&#10;&#10;                                val nextTime = calculateNextDose(interval)&#10;                                if (nextTime != null) {&#10;                                    Text(&quot; Sljedeće: $nextTime&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    if (naziv.isNotBlank() &amp;&amp; doza.isNotBlank()) {&#10;                        val noviLijek = Lijek(&#10;                            id = lijek?.id ?: 0,&#10;                            naziv = naziv.trim(),&#10;                            doza = doza.trim(),&#10;                            napomene = lijek?.napomene ?: &quot;&quot;,&#10;                            jutro = jutro,&#10;                            popodne = popodne,&#10;                            vecer = vecer,&#10;                            pakiranje = pakiranje.toIntOrNull() ?: 30,&#10;                            trenutnoStanje = trenutnoStanje.toIntOrNull() ?: 30,&#10;                            boja = lijek?.boja ?: &quot;#4CAF50&quot;,&#10;                            tipUzimanja = lijek?.tipUzimanja ?: TipUzimanja.STANDARDNO,&#10;                            vrijemeJutro = lijek?.vrijemeJutro ?: &quot;08:00&quot;,&#10;                            vrijemePopodne = lijek?.vrijemePopodne ?: &quot;14:00&quot;,&#10;                            vrijemeVecer = lijek?.vrijemeVecer ?: &quot;20:00&quot;,&#10;                            intervalnoUzimanje = lijek?.intervalnoUzimanje,&#10;                            sortOrderJutro = lijek?.sortOrderJutro ?: 0,&#10;                            sortOrderPopodne = lijek?.sortOrderPopodne ?: 0,&#10;                            sortOrderVecer = lijek?.sortOrderVecer ?: 0,&#10;                            cijena = cijena.trim()&#10;                        )&#10;                        onSave(noviLijek)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;Spremi&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            Row {&#10;                TextButton(onClick = onDismiss) {&#10;                    Text(&quot;Odustani&quot;)&#10;                }&#10;                if (lijek != null) {&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    TextButton(onClick = { showDeleteConfirm = true }) {&#10;                        Text(&quot;Obriši&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    )&#10;&#10;    // Delete confirmation dialog (shown when user taps delete)&#10;    if (showDeleteConfirm &amp;&amp; lijek != null) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDeleteConfirm = false },&#10;            title = { Text(&quot;Potvrda brisanja&quot;) },&#10;            text = { Text(&quot;Jeste li sigurni da želite obrisati lijek '${lijek.naziv}'? Ova radnja se ne može poništiti.&quot;) },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    onDelete(lijek)&#10;                    showDeleteConfirm = false&#10;                    onDismiss()&#10;                }) {&#10;                    Text(&quot;Obriši&quot;, color = Color.Red)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDeleteConfirm = false }) {&#10;                    Text(&quot;Odustani&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    // Dialog za intervalnu terapiju&#10;    if (showIntervalDialog &amp;&amp; lijek != null) {&#10;        IntervalnaTerapijaDialog(&#10;            lijek = lijek,&#10;            onDismiss = { showIntervalDialog = false },&#10;            onSave = { updatedLijek -&gt;&#10;                onSave(updatedLijek)&#10;                showIntervalDialog = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;// Novi jednostavan dialog za intervalnu terapiju&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun IntervalnaTerapijaDialog(&#10;    lijek: Lijek,&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (Lijek) -&gt; Unit&#10;) {&#10;    var ukupnoKomada by remember { mutableStateOf(lijek.intervalnoUzimanje?.ukupnoUzimanja?.toString() ?: &quot;12&quot;) }&#10;    var intervalSati by remember { mutableStateOf(lijek.intervalnoUzimanje?.intervalSati?.toString() ?: &quot;8&quot;) }&#10;&#10;    // Date/time formatters&#10;    val dateFormatter = java.text.SimpleDateFormat(&quot;dd-MM-yyyy&quot;, java.util.Locale.getDefault())&#10;    val timeFormatter = java.text.SimpleDateFormat(&quot;HH:mm&quot;, java.util.Locale.getDefault())&#10;    val dateTimeFormatter = java.text.SimpleDateFormat(&quot;dd-MM-yyyy HH:mm&quot;, java.util.Locale.getDefault())&#10;&#10;    val todayCal = java.util.Calendar.getInstance()&#10;    val initialDate = lijek.intervalnoUzimanje?.startDateTime?.takeIf { it.isNotBlank() }?.let {&#10;        try { dateTimeFormatter.parse(it) } catch (_: Exception) { null }&#10;    } ?: todayCal.time&#10;&#10;    var pickedDate by remember { mutableStateOf(initialDate) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;&#10;    val prikazaniDatum = dateFormatter.format(pickedDate)&#10;    val prikazanoVrijeme = timeFormatter.format(pickedDate)&#10;&#10;    // KARTICA: Intervalno uzimanje (dialog)&#10;    AlertDialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant,&#10;                contentColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&#10;                    &quot;⏰ Intervalno uzimanje&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    &quot;Postavite raspored za ${lijek.naziv}:&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = ukupnoKomada,&#10;                        onValueChange = { ukupnoKomada = it },&#10;                        label = { Text(&quot;Ukupno komada&quot;) },&#10;                        placeholder = { Text(&quot;12&quot;) },&#10;                        leadingIcon = { Text(&quot;&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    OutlinedTextField(&#10;                        value = intervalSati,&#10;                        onValueChange = { intervalSati = it },&#10;                        label = { Text(&quot;Svakih (sati)&quot;) },&#10;                        placeholder = { Text(&quot;8&quot;) },&#10;                        leadingIcon = { Text(&quot;⏰&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = prikazaniDatum,&#10;                        onValueChange = {},&#10;                        label = { Text(&quot;Datum početka&quot;) },&#10;                        readOnly = true,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { showDatePicker = true }&#10;                    )&#10;&#10;                    OutlinedTextField(&#10;                        value = prikazanoVrijeme,&#10;                        onValueChange = {},&#10;                        label = { Text(&quot;Vrijeme početka&quot;) },&#10;                        readOnly = true,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { showTimePicker = true }&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // KARTICA: Intervalno uzimanje (pregled u dialogu)&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant, // Ovdje se postavlja pozadina kartice&#10;                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    ),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                ) {&#10;                    Column(modifier = Modifier.padding(12.dp)) {&#10;                        Text(&#10;                            &quot; Pregled:&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;&#10;                        val komada = ukupnoKomada.toIntOrNull() ?: 12&#10;                        val interval = intervalSati.toIntOrNull() ?: 8&#10;                        val trajanjeDana = (komada * interval) / 24.0&#10;&#10;                        Text(&quot;Početak: $prikazaniDatum $prikazanoVrijeme&quot;)&#10;                        Text(&quot; Ukupno: $komada komada&quot;)&#10;                        Text(&quot;⏰ Interval: svaki $interval h&quot;)&#10;                        Text(&quot; Trajanje: ${String.format(&quot;%.1f&quot;, trajanjeDana)} dana&quot;)&#10;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        // Prikaži samo jedan sljedeći termin unutar 24 sata, prema intervalu&#10;                        val nextTerm = remember(pickedDate, interval) {&#10;                            val cal = java.util.Calendar.getInstance()&#10;                            cal.time = pickedDate&#10;                            val now = java.util.Calendar.getInstance()&#10;                            val formatter = java.text.SimpleDateFormat(&quot;HH:mm&quot;, java.util.Locale.getDefault())&#10;                            var result: String? = null&#10;                            repeat(komada) {&#10;                                val diff = cal.timeInMillis - now.timeInMillis&#10;                                if (diff &gt;= 0 &amp;&amp; diff &lt; 24*60*60*1000) {&#10;                                    result = formatter.format(cal.time)&#10;                                    return@repeat&#10;                                }&#10;                                cal.add(java.util.Calendar.HOUR_OF_DAY, interval)&#10;                            }&#10;                            result&#10;                        }&#10;                        if (nextTerm != null) {&#10;                            Text(&quot; Sljedeći termin: $nextTerm&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                        } else {&#10;                            Text(&quot;Nema termina unutar 24h&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                        }&#10;                    }&#10;                }&#10;                // === KRAJ KARTICE ZA PREGLED INTERVALNE TERAPIJE U DIALOGU ===&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                // Gumbi horizontalno, vizualno poboljšani&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(&quot;Odustani&quot;, fontWeight = FontWeight.Medium)&#10;                    }&#10;                    TextButton(onClick = {&#10;                        val updatedLijek = lijek.copy(&#10;                            tipUzimanja = TipUzimanja.STANDARDNO,&#10;                            intervalnoUzimanje = null&#10;                        )&#10;                        onSave(updatedLijek)&#10;                        onDismiss()&#10;                    }) {&#10;                        Text(&quot;Isključi&quot;, fontWeight = FontWeight.Medium, color = Color.Red)&#10;                    }&#10;                    Button(onClick = {&#10;                        val ukupno = ukupnoKomada.toIntOrNull() ?: 12&#10;                        val interval = intervalSati.toIntOrNull() ?: 8&#10;                        val trajanje = (ukupno * interval / 24.0).toInt().coerceAtLeast(1)&#10;                        val startDateTime = dateTimeFormatter.format(pickedDate)&#10;&#10;                        val novaIntervalnaTerapija = IntervalnoUzimanje(&#10;                            intervalSati = interval,&#10;                            startDateTime = startDateTime,&#10;                            trajanjeDana = trajanje,&#10;                            complianceHistory = emptyList(),&#10;                            ukupnoUzimanja = ukupno&#10;                        )&#10;&#10;                        val updatedLijek = lijek.copy(&#10;                            tipUzimanja = TipUzimanja.INTERVALNO,&#10;                            intervalnoUzimanje = novaIntervalnaTerapija,&#10;                            jutro = false,&#10;                            popodne = false,&#10;                            vecer = false&#10;                        )&#10;&#10;                        onSave(updatedLijek)&#10;                    }, colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)) {&#10;                        Text(&quot;Započni&quot;, fontWeight = FontWeight.Bold, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // DatePicker dialog implemented via AndroidView inside AlertDialog (ali izvan Card-a!)&#10;    if (showDatePicker) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showDatePicker = false }) { Text(&quot;Odaberi&quot;) }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) { Text(&quot;Odustani&quot;) }&#10;            },&#10;            text = {&#10;                val cal = java.util.Calendar.getInstance()&#10;                cal.time = pickedDate&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.DatePicker(ctx).apply {&#10;                            init(&#10;                                cal.get(java.util.Calendar.YEAR),&#10;                                cal.get(java.util.Calendar.MONTH),&#10;                                cal.get(java.util.Calendar.DAY_OF_MONTH)&#10;                            ) { _, year, month, dayOfMonth -&gt;&#10;                                val newCal = java.util.Calendar.getInstance()&#10;                                newCal.time = pickedDate&#10;                                newCal.set(year, month, dayOfMonth)&#10;                                pickedDate = newCal.time&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;    // TimePicker dialog via AndroidView (izvan Card-a!)&#10;    if (showTimePicker) {&#10;        AlertDialog(&#10;            onDismissRequest = { showTimePicker = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showTimePicker = false }) { Text(&quot;Odaberi&quot;) }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showTimePicker = false }) { Text(&quot;Odustani&quot;) }&#10;            },&#10;            text = {&#10;                val cal = java.util.Calendar.getInstance()&#10;                cal.time = pickedDate&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.TimePicker(ctx).apply {&#10;                            setIs24HourView(true)&#10;                            try {&#10;                                hour = cal.get(java.util.Calendar.HOUR_OF_DAY)&#10;                                minute = cal.get(java.util.Calendar.MINUTE)&#10;                            } catch (_: Throwable) { }&#10;                            setOnTimeChangedListener { _, hourOfDay, minute -&gt;&#10;                                val newCal = java.util.Calendar.getInstance()&#10;                                newCal.time = pickedDate&#10;                                newCal.set(java.util.Calendar.HOUR_OF_DAY, hourOfDay)&#10;                                newCal.set(java.util.Calendar.MINUTE, minute)&#10;                                pickedDate = newCal.time&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StatisticsScreen(&#10;    lijekovi: List&lt;Lijek&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        Text(&#10;            &quot;Statistike i compliance&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .shadow(&#10;                    elevation = 2.dp,&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)&#10;                )&#10;                .clip(RoundedCornerShape(12.dp)),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    &quot; Osnovne statistike&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&quot;Ukupno lijekova: ${lijekovi.size}&quot;)&#10;                Text(&quot;Jutarnji lijekovi: ${lijekovi.count { it.jutro }}&quot;)&#10;                Text(&quot;Popodnevni lijekovi: ${lijekovi.count { it.popodne }}&quot;)&#10;                Text(&quot;Večernji lijekovi: ${lijekovi.count { it.vecer }}&quot;)&#10;                Text(&quot;Intervalni lijekovi: ${lijekovi.count { it.tipUzimanja == TipUzimanja.INTERVALNO }}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingsScreen(&#10;    onExportImport: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    // Load saved reminder times from SharedPreferences (format HH:mm)&#10;    val prefs = remember { context.getSharedPreferences(&quot;e_lijekovi_prefs&quot;, Context.MODE_PRIVATE) }&#10;    var jutroTime by remember { mutableStateOf(prefs.getString(&quot;reminder_jutro&quot;, &quot;08:00&quot;) ?: &quot;08:00&quot;) }&#10;    var podneTime by remember { mutableStateOf(prefs.getString(&quot;reminder_podne&quot;, &quot;14:00&quot;) ?: &quot;14:00&quot;) }&#10;    var vecerTime by remember { mutableStateOf(prefs.getString(&quot;reminder_vecer&quot;, &quot;20:00&quot;) ?: &quot;20:00&quot;) }&#10;&#10;    var showTimePickerJutro by remember { mutableStateOf(false) }&#10;    var showTimePickerPodne by remember { mutableStateOf(false) }&#10;    var showTimePickerVecer by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&#10;            &quot;Postavke&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Button(&#10;            onClick = onExportImport,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Upravljanje podacima&quot;)&#10;        }&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .shadow(&#10;                    elevation = 1.dp,&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)&#10;                )&#10;                .clip(RoundedCornerShape(12.dp)),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    &quot;ℹ️ Pomoć za Import&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&#10;                    &quot;• Datoteka mora biti .json format\n&quot; +&#10;                    &quot;• JSON mora biti array [ ... ]\n&quot; +&#10;                    &quot;• Struktura mora odgovarati Lijek klasi\n&quot; +&#10;                    &quot;• Koristite 'Export/Import' za provjeru&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        // Podsjetnici card&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .shadow(&#10;                    elevation = 1.dp,&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.06f)&#10;                )&#10;                .clip(RoundedCornerShape(12.dp)),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                Text(&quot; Podsjetnici&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)&#10;                Text(&quot;Podesi vrijeme za jutarnju, podnevnu i večernju notifikaciju.&quot;)&#10;&#10;                // Jutro row&#10;                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&quot;Jutro&quot;, fontWeight = FontWeight.Medium)&#10;                        Text(jutroTime, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                    Button(onClick = { showTimePickerJutro = true }) { Text(&quot;Odaberi&quot;) }&#10;                }&#10;&#10;                // Podne row&#10;                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&quot;Podne&quot;, fontWeight = FontWeight.Medium)&#10;                        Text(podneTime, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                    Button(onClick = { showTimePickerPodne = true }) { Text(&quot;Odaberi&quot;) }&#10;                }&#10;&#10;                // Večer row&#10;                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&quot;Večer&quot;, fontWeight = FontWeight.Medium)&#10;                        Text(vecerTime, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                    Button(onClick = { showTimePickerVecer = true }) { Text(&quot;Odaberi&quot;) }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&quot;Napomena: Ovdje se postavlja vrijeme podsjetnika; sama zakazivanja notifikacija/alarma bit će implementirana zasebno.&quot;, style = MaterialTheme.typography.bodySmall)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Time pickers implemented as AlertDialog with AndroidView TimePicker (reused pattern)&#10;    if (showTimePickerJutro) {&#10;        AlertDialog(&#10;            onDismissRequest = { showTimePickerJutro = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showTimePickerJutro = false }) { Text(&quot;Zatvori&quot;) }&#10;            },&#10;            text = {&#10;                val parts = jutroTime.split(&quot;:&quot;)&#10;                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 8&#10;                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.TimePicker(ctx).apply {&#10;                            setIs24HourView(true)&#10;                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}&#10;                            this.hour = hour&#10;                            this.minute = minute&#10;                            setOnTimeChangedListener { _, h, m -&gt;&#10;                                val hh = if (h &lt; 10) &quot;0$h&quot; else &quot;$h&quot;&#10;                                val mm = if (m &lt; 10) &quot;0$m&quot; else &quot;$m&quot;&#10;                                jutroTime = &quot;$hh:$mm&quot;&#10;                                prefs.edit().putString(&quot;reminder_jutro&quot;, jutroTime).apply()&#10;                                // Schedule or reschedule the daily reminder&#10;                                NotificationScheduler.scheduleDailyReminder(context, jutroTime, &quot;Jutro&quot;)&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showTimePickerPodne) {&#10;        AlertDialog(&#10;            onDismissRequest = { showTimePickerPodne = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showTimePickerPodne = false }) { Text(&quot;Zatvori&quot;) }&#10;            },&#10;            text = {&#10;                val parts = podneTime.split(&quot;:&quot;)&#10;                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 14&#10;                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.TimePicker(ctx).apply {&#10;                            setIs24HourView(true)&#10;                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}&#10;                            this.hour = hour&#10;                            this.minute = minute&#10;                            setOnTimeChangedListener { _, h, m -&gt;&#10;                                val hh = if (h &lt; 10) &quot;0$h&quot; else &quot;$h&quot;&#10;                                val mm = if (m &lt; 10) &quot;0$m&quot; else &quot;$m&quot;&#10;                                podneTime = &quot;$hh:$mm&quot;&#10;                                prefs.edit().putString(&quot;reminder_podne&quot;, podneTime).apply()&#10;                                // Schedule or reschedule the daily reminder&#10;                                NotificationScheduler.scheduleDailyReminder(context, podneTime, &quot;Podne&quot;)&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showTimePickerVecer) {&#10;        AlertDialog(&#10;            onDismissRequest = { showTimePickerVecer = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showTimePickerVecer = false }) { Text(&quot;Zatvori&quot;) }&#10;            },&#10;            text = {&#10;                val parts = vecerTime.split(&quot;:&quot;)&#10;                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 20&#10;                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.TimePicker(ctx).apply {&#10;                            setIs24HourView(true)&#10;                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}&#10;                            this.hour = hour&#10;                            this.minute = minute&#10;                            setOnTimeChangedListener { _, h, m -&gt;&#10;                                val hh = if (h &lt; 10) &quot;0$h&quot; else &quot;$h&quot;&#10;                                val mm = if (m &lt; 10) &quot;0$m&quot; else &quot;$m&quot;&#10;                                vecerTime = &quot;$hh:$mm&quot;&#10;                                prefs.edit().putString(&quot;reminder_vecer&quot;, vecerTime).apply()&#10;                                // Schedule or reschedule the daily reminder&#10;                                NotificationScheduler.scheduleDailyReminder(context, vecerTime, &quot;Večer&quot;)&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PocetniEkran(context: Context? = null) {&#10;    val lijekovi = remember { mutableStateListOf&lt;Lijek&gt;() }&#10;    var idCounter by rememberSaveable { mutableIntStateOf(0) }&#10;    var editLijek by remember { mutableStateOf&lt;Lijek?&gt;(null) }&#10;    var showAddLijek by remember { mutableStateOf(false) }&#10;    var showExportImportDialog by remember { mutableStateOf(false) }&#10;    var showMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentScreen by remember { mutableStateOf(&quot;home&quot;) }&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    val saveData = {&#10;        context?.let { ctx -&gt;&#10;            LijekoviDataManager.saveToLocalStorage(ctx, lijekovi)&#10;        }&#10;        Unit&#10;    }&#10;&#10;    // Enhanced add with highlight animation&#10;    val handleAddLijek: (Lijek) -&gt; Unit = { newLijek -&gt;&#10;        val lijekWithId = newLijek.copy(id = idCounter++)&#10;        lijekovi.add(lijekWithId)&#10;        saveData()&#10;        showAddLijek = false&#10;&#10;        scope.launch {&#10;            snackbarHostState.showSnackbar(&#10;                message = &quot;Terapija '${newLijek.naziv}' dodana&quot;,&#10;                actionLabel = &quot;Uredi&quot;,&#10;                duration = SnackbarDuration.Short&#10;            ).also { result -&gt;&#10;                if (result == SnackbarResult.ActionPerformed) {&#10;                    editLijek = lijekWithId&#10;                }&#10;            }&#10;&#10;            // Clear highlight after animation&#10;            kotlinx.coroutines.delay(1000)&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        context?.let { ctx -&gt;&#10;            val loadedLijekovi = LijekoviDataManager.loadFromLocalStorage(ctx)&#10;            if (loadedLijekovi != null &amp;&amp; loadedLijekovi.isNotEmpty()) {&#10;                lijekovi.clear()&#10;                lijekovi.addAll(loadedLijekovi)&#10;                idCounter = (loadedLijekovi.maxOfOrNull { it.id } ?: -1) + 1&#10;            }&#10;        }&#10;    }&#10;&#10;    val exportLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.CreateDocument(&quot;application/json&quot;)&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            context?.let { ctx -&gt;&#10;                val success = LijekoviDataManager.saveToFile(ctx, it, lijekovi)&#10;                showMessage = if (success) &quot;Podaci uspješno eksportirani!&quot; else &quot;Greška pri exportu!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    val importLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.OpenDocument()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            context?.let { ctx -&gt;&#10;                try {&#10;                    val importedLijekovi = LijekoviDataManager.loadFromFile(ctx, it)&#10;                    if (importedLijekovi != null) {&#10;                        lijekovi.clear()&#10;                        lijekovi.addAll(importedLijekovi)&#10;                        idCounter = (importedLijekovi.maxOfOrNull { lijek -&gt; lijek.id } ?: -1) + 1&#10;                        saveData()&#10;                        currentScreen = &quot;home&quot;&#10;                        showMessage = &quot;✅ Podaci uspješno importirani!\n\nUčitano ${importedLijekovi.size} lijekova.&quot;&#10;                    } else {&#10;                        showMessage = &quot;&quot;&quot;&#10;                            ❌ Greška pri importu podataka!&#10;                            &#10;                            Mogući uzroci:&#10;                            • Datoteka nije valjani JSON format&#10;                            • JSON ne odgovara strukturi aplikacije  &#10;                            • Datoteka je oštećena ili prazna&#10;                            • Nema dozvolu za čitanje datoteke&#10;                            &#10;                             Savjet: Pokušajte exportirati podatke iz aplikacije pa ih importirati nazad da testirate format.&#10;                            &#10;                             Za detaljne informacije provjerite Logcat (filtriraj: LijekoviDataManager)&#10;                        &quot;&quot;&quot;.trimIndent()&#10;                    }&#10;                } catch (e: Exception) {&#10;                    showMessage = &quot;&quot;&quot;&#10;                        ❌ Neočekivana greška pri importu!&#10;                        &#10;                        Greška: ${e.message ?: &quot;Nepoznata greška&quot;}&#10;                        &#10;                         Provjerite:&#10;                        • Je li datoteka ispravno eksportirana iz aplikacije&#10;                        • Imate li dozvolu za čitanje datoteke&#10;                        • Nije li datoteka oštećena&#10;                    &quot;&quot;&quot;.trimIndent()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    showMessage?.let { message -&gt;&#10;        AlertDialog(&#10;            onDismissRequest = { showMessage = null },&#10;            title = { Text(&quot;Obavijest&quot;) },&#10;            text = { Text(message) },&#10;            confirmButton = {&#10;                TextButton(onClick = { showMessage = null }) {&#10;                    Text(&quot;U redu&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showExportImportDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showExportImportDialog = false },&#10;            title = { Text(&quot;Upravljanje podacima&quot;) },&#10;            text = {&#10;                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                    Text(&quot;Odaberite akciju:&quot;)&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                    Button(&#10;                        onClick = {&#10;                            showExportImportDialog = false&#10;                            exportLauncher.launch(&quot;lijekovi_backup.json&quot;)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&quot;Exportaj podatke&quot;)&#10;                    }&#10;                    Button(&#10;                        onClick = {&#10;                            showExportImportDialog = false&#10;                            importLauncher.launch(arrayOf(&quot;application/json&quot;))&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&quot;Importaj podatke&quot;)&#10;                    }&#10;                    Button(&#10;                        onClick = {&#10;                            lijekovi.clear()&#10;                            saveData()&#10;                            showExportImportDialog = false&#10;                            showMessage = &quot;Svi podaci su uspješno obrisani!&quot;&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(containerColor = Color.Red)&#10;                    ) {&#10;                        Text(&quot;Obriši sve podatke&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showExportImportDialog = false }) {&#10;                Text(&quot;Odustani&quot;)&#10;            }&#10;        })&#10;    }&#10;&#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        drawerContent = {&#10;            ModalDrawerSheet {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;e-LijekoviHR&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.padding(vertical = 16.dp)&#10;                    )&#10;&#10;                    Divider(modifier = Modifier.padding(bottom = 8.dp))&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(Icons.Default.Home, contentDescription = &quot;Početna&quot;) },&#10;                        label = { Text(&quot;Početna&quot;) },&#10;                        selected = currentScreen == &quot;home&quot;,&#10;                        onClick = {&#10;                            currentScreen = &quot;home&quot;&#10;                            scope.launch { drawerState.close() }&#10;                        },&#10;                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)&#10;                    )&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(Icons.Default.Analytics, contentDescription = &quot;Statistike&quot;) },&#10;                        label = { Text(&quot;Statistike&quot;) },&#10;                        selected = currentScreen == &quot;statistics&quot;,&#10;                        onClick = {&#10;                            currentScreen = &quot;statistics&quot;&#10;                            scope.launch { drawerState.close() }&#10;                        },&#10;                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)&#10;                    )&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(Icons.Default.Settings, contentDescription = &quot;Postavke&quot;) },&#10;                        label = { Text(&quot;Postavke&quot;) },&#10;                        selected = currentScreen == &quot;settings&quot;,&#10;                        onClick = {&#10;                            currentScreen = &quot;settings&quot;&#10;                            scope.launch { drawerState.close() }&#10;                        },&#10;                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)&#10;                    )&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(Icons.Default.Info, contentDescription = &quot;O aplikaciji&quot;) },&#10;                        label = { Text(&quot;O aplikaciji&quot;) },&#10;                        selected = currentScreen == &quot;about&quot;,&#10;                        onClick = {&#10;                            currentScreen = &quot;about&quot;&#10;                            scope.launch { drawerState.close() }&#10;                        },&#10;                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    title = {&#10;                        Text(&#10;                            when (currentScreen) {&#10;                                &quot;home&quot; -&gt; &quot;Moji lijekovi&quot;&#10;                                &quot;statistics&quot; -&gt; &quot;Statistike&quot;&#10;                                &quot;settings&quot; -&gt; &quot;Postavke&quot;&#10;                                &quot;about&quot; -&gt; &quot;O aplikaciji&quot;&#10;                                else -&gt; &quot;e-LijekoviHR&quot;&#10;                            }&#10;                        )&#10;                    },&#10;                    navigationIcon = {&#10;                        IconButton(&#10;                            onClick = {&#10;                                scope.launch { drawerState.open() }&#10;                            }&#10;                        ) {&#10;                            Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            floatingActionButton = {&#10;                if (currentScreen == &quot;home&quot;) {&#10;                    AnimatedFAB(&#10;                        isExpanded = showAddLijek,&#10;                        onClick = { showAddLijek = true }&#10;                    )&#10;                }&#10;            },&#10;            snackbarHost = {&#10;                SnackbarHost(hostState = snackbarHostState)&#10;            }&#10;        ) { paddingValues -&gt;&#10;            when (currentScreen) {&#10;                &quot;home&quot; -&gt; {&#10;                    HomeScreen(&#10;                        lijekovi = lijekovi,&#10;                        onTake = { lijek -&gt;&#10;                            val grupa = when {&#10;                                lijek.jutro -&gt; DobaDana.JUTRO&#10;                                lijek.popodne -&gt; DobaDana.POPODNE&#10;                                lijek.vecer -&gt; DobaDana.VECER&#10;                                else -&gt; null&#10;                            }&#10;                            if (grupa != null &amp;&amp; lijek.mozeUzeti(grupa)) {&#10;                                lijekovi[lijekovi.indexOf(lijek)] = lijek.uzmiLijek(grupa)&#10;                                saveData()&#10;                                scope.launch {&#10;                                    snackbarHostState.showSnackbar(&#10;                                        &quot;Uspješno uzeto: ${lijek.naziv}&quot;,&#10;                                        duration = SnackbarDuration.Short&#10;                                    )&#10;                                }&#10;                            } else {&#10;                                scope.launch {&#10;                                    snackbarHostState.showSnackbar(&#10;                                        &quot;Nije moguće uzeti dozu za ${lijek.naziv}&quot;,&#10;                                        duration = SnackbarDuration.Short&#10;                                    )&#10;                                }&#10;                            }&#10;                        },&#10;                        onEdit = { lijek -&gt; editLijek = lijek },&#10;                        modifier = Modifier.padding(paddingValues)&#10;                    )&#10;                }&#10;                &quot;statistics&quot; -&gt; {&#10;                    StatisticsScreen(&#10;                        lijekovi = lijekovi,&#10;                        modifier = Modifier.padding(paddingValues)&#10;                    )&#10;                }&#10;                &quot;settings&quot; -&gt; {&#10;                    SettingsScreen(&#10;                        onExportImport = { showExportImportDialog = true },&#10;                        modifier = Modifier.padding(paddingValues)&#10;                    )&#10;                }&#10;                &quot;about&quot; -&gt; {&#10;                    AboutScreen(modifier = Modifier.padding(paddingValues))&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAddLijek) {&#10;        LijekDialog(&#10;            lijek = null,&#10;            onDismiss = { showAddLijek = false },&#10;            onSave = { newLijek -&gt;&#10;                 val duplicate = lijekovi.any {&#10;                     it.naziv.lowercase() == newLijek.naziv.lowercase()&#10;                 }&#10;&#10;                 if (duplicate) {&#10;                     scope.launch {&#10;                         snackbarHostState.showSnackbar(&#10;                             message = &quot;Lijek '${newLijek.naziv}' već postoji!&quot;,&#10;                             duration = SnackbarDuration.Short&#10;                         )&#10;                     }&#10;                     return@LijekDialog&#10;                 }&#10;&#10;                 handleAddLijek(newLijek)&#10;             }&#10;            , onDelete = { /* no-op for add dialog */ }&#10;        )&#10;     }&#10;&#10;     editLijek?.let { lijek -&gt;&#10;         LijekDialog(&#10;             lijek = lijek,&#10;             onDismiss = { editLijek = null },&#10;             onSave = { updatedLijek -&gt;&#10;                 val duplicate = lijekovi.any {&#10;                     it.id != lijek.id &amp;&amp; it.naziv.lowercase() == updatedLijek.naziv.lowercase()&#10;                 }&#10;&#10;                 if (duplicate) {&#10;                     scope.launch {&#10;                         snackbarHostState.showSnackbar(&#10;                             message = &quot;Lijek '${updatedLijek.naziv}' već postoji!&quot;,&#10;                             duration = SnackbarDuration.Short&#10;                         )&#10;                     }&#10;                     return@LijekDialog&#10;                 }&#10;&#10;                 val index = lijekovi.indexOfFirst { it.id == lijek.id }&#10;                 if (index != -1) {&#10;                     lijekovi[index] = updatedLijek&#10;                     saveData()&#10;&#10;                     scope.launch {&#10;                         snackbarHostState.showSnackbar(&#10;                             message = &quot;Lijek '${updatedLijek.naziv}' ažuriran&quot;,&#10;                             duration = SnackbarDuration.Short&#10;                         )&#10;                     }&#10;                 }&#10;                 editLijek = null&#10;             }&#10;            , onDelete = { deletedLijek -&gt;&#10;                val idx = lijekovi.indexOfFirst { it.id == deletedLijek.id }&#10;                if (idx != -1) {&#10;                    // Remove and keep a reference to the removed item so we can restore it on Undo&#10;                    val removed = lijekovi.removeAt(idx)&#10;                    saveData()&#10;                    scope.launch {&#10;                        // Show snackbar with 'Poništi' action to allow undoing the delete&#10;                        val result = snackbarHostState.showSnackbar(&#10;                            message = &quot;Lijek '${removed.naziv}' obrisan&quot;,&#10;                            actionLabel = &quot;Poništi&quot;,&#10;                            duration = SnackbarDuration.Short&#10;                        )&#10;&#10;                        if (result == SnackbarResult.ActionPerformed) {&#10;                            // Reinsert the removed item at its previous index (or end if index out of range)&#10;                            val insertIndex = if (idx &lt;= lijekovi.size) idx else lijekovi.size&#10;                            lijekovi.add(insertIndex, removed)&#10;                            saveData()&#10;                        }&#10;                    }&#10;                }&#10;                editLijek = null&#10;            }&#10;        )&#10;     }&#10;}&#10;&#10;// Enhanced HomeScreen with new animated components&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AnimatedFAB(&#10;    isExpanded: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isExpanded) 45f else 0f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessMedium&#10;        ),&#10;        label = &quot;fab_rotation&quot;&#10;    )&#10;&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = modifier,&#10;        containerColor = MaterialTheme.colorScheme.primary&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Add,&#10;            contentDescription = &quot;Dodaj lijek&quot;,&#10;            modifier = Modifier.graphicsLayer(rotationZ = rotation)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    lijekovi: List&lt;Lijek&gt;,&#10;    onTake: (Lijek) -&gt; Unit,&#10;    onEdit: (Lijek) -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    scaffoldPadding: PaddingValues = PaddingValues(0.dp)&#10;) {&#10;    val grupe = listOf(&#10;        DobaDana.JUTRO to &quot;Jutro&quot;,&#10;        DobaDana.POPODNE to &quot;Podne&quot;,&#10;        DobaDana.VECER to &quot;Večer&quot;&#10;    )&#10;    val skipSnackbarOnTakeAll = remember { mutableStateOf(false) }&#10;    LazyColumn(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(18.dp),&#10;        contentPadding = PaddingValues(&#10;            bottom = scaffoldPadding.calculateBottomPadding()&#10;                + WindowInsets.navigationBars.asPaddingValues().calculateBottomPadding()&#10;                + 16.dp // internal margin&#10;        )&#10;    ) {&#10;        grupe.forEach { (doba, naziv) -&gt;&#10;            val grupaLijekova = lijekovi.filter {&#10;                when (doba) {&#10;                    DobaDana.JUTRO -&gt; it.jutro&#10;                    DobaDana.POPODNE -&gt; it.popodne&#10;                    DobaDana.VECER -&gt; it.vecer&#10;                }&#10;            }&#10;            if (grupaLijekova.isNotEmpty()) {&#10;                item {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 10.dp)&#10;                    ) {&#10;                        val ikona = when (doba) {&#10;                            DobaDana.JUTRO -&gt; Icons.Default.WbSunny&#10;                            DobaDana.POPODNE -&gt; Icons.Default.WbTwilight&#10;                            DobaDana.VECER -&gt; Icons.Default.NightsStay&#10;                        }&#10;                        Icon(&#10;                            imageVector = ikona,&#10;                            contentDescription = naziv,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(28.dp).padding(end = 10.dp)&#10;                        )&#10;                        Text(&#10;                            text = naziv,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.padding(end = 12.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                        val mozeUzetiNetko = grupaLijekova.any { it.mozeUzeti(doba) &amp;&amp; !it.jeUzetZaDanas() &amp;&amp; it.trenutnoStanje &gt; 0 }&#10;                        Button(&#10;                            onClick = {&#10;                                skipSnackbarOnTakeAll.value = true&#10;                                grupaLijekova.forEach {&#10;                                    if (it.mozeUzeti(doba) &amp;&amp; !it.jeUzetZaDanas() &amp;&amp; it.trenutnoStanje &gt; 0) onTake(it)&#10;                                }&#10;                                skipSnackbarOnTakeAll.value = false&#10;                            },&#10;                            enabled = mozeUzetiNetko,&#10;                            modifier = Modifier&#10;                                .height(38.dp)&#10;                                .padding(vertical = 2.dp)&#10;                        ) {&#10;                            Text(&quot;Uzmi sve&quot;, fontSize = 15.sp)&#10;                        }&#10;                    }&#10;                }&#10;                items(grupaLijekova.size) { idx -&gt;&#10;                    val lijek = grupaLijekova[idx]&#10;                    Box(modifier = Modifier.clickable { onEdit(lijek) }) {&#10;                        LijekCard(&#10;                            lijek = lijek,&#10;                            onTake = {&#10;                                if (!skipSnackbarOnTakeAll.value) onTake(lijek)&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .then(if (idx == grupaLijekova.lastIndex) Modifier.padding(bottom = 16.dp) else Modifier)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // Dodaj &quot;Intervalno&quot; grupu za intervalne lijekove&#10;        val intervalniLijekovi = lijekovi.filter {&#10;            it.tipUzimanja == TipUzimanja.INTERVALNO&#10;        }&#10;        if (intervalniLijekovi.isNotEmpty()) {&#10;            item {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 10.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Schedule,&#10;                        contentDescription = &quot;Intervalno&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(28.dp).padding(end = 10.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Intervalno&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.padding(end = 12.dp)&#10;                    )&#10;                }&#10;            }&#10;            items(intervalniLijekovi.size) { idx -&gt;&#10;                val lijek = intervalniLijekovi[idx]&#10;                Box(modifier = Modifier.clickable { onEdit(lijek) }) {&#10;                    LijekCard(&#10;                        lijek = lijek,&#10;                        onTake = {&#10;                            if (!skipSnackbarOnTakeAll.value) onTake(lijek)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;        // Dodaj &quot;Ostali&quot; grupu za lijekove bez termina i koji nisu intervalni&#10;        val ostaliLijekovi = lijekovi.filter {&#10;            !it.jutro &amp;&amp; !it.popodne &amp;&amp; !it.vecer &amp;&amp; it.tipUzimanja != TipUzimanja.INTERVALNO&#10;        }&#10;        if (ostaliLijekovi.isNotEmpty()) {&#10;            item {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 10.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MedicalServices,&#10;                        contentDescription = &quot;Ostali&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(28.dp).padding(end = 10.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Ostali&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.padding(end = 12.dp)&#10;                    )&#10;                }&#10;            }&#10;            items(ostaliLijekovi.size) { idx -&gt;&#10;                val lijek = ostaliLijekovi[idx]&#10;                Box(modifier = Modifier.clickable { onEdit(lijek) }) {&#10;                    LijekCard(&#10;                        lijek = lijek,&#10;                        onTake = {&#10;                            if (!skipSnackbarOnTakeAll.value) onTake(lijek)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AboutScreen(modifier: Modifier = Modifier) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            &quot;O aplikaciji&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .shadow(&#10;                    elevation = 2.dp,&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)&#10;                )&#10;                .clip(RoundedCornerShape(12.dp)),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    &quot;e-LijekoviHR&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&quot;Verzija: ${&quot;1.1.1&quot;}&quot;)&#10;                Text(&quot;Hrvatska aplikacija za praćenje lijekova&quot;)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&quot;Značajke:&quot;)&#10;                Text(&quot;• Praćenje standardnih lijekova&quot;)&#10;                Text(&quot;• Napredni intervalni doziranje&quot;)&#10;                Text(&quot;• Compliance statistike&quot;)&#10;                Text(&quot;• Export/Import podataka&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.e_lijekovi_2&#10;&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.content.Context&#10;import android.content.pm.PackageManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.animation.core.spring&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.viewinterop.AndroidView&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.example.e_lijekovi_2.ui.theme.E_lijekovi_2Theme&#10;import com.example.e_lijekovi_2.ui.components.LijekCard&#10;import kotlinx.coroutines.launch&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.provider.Settings&#10;import androidx.core.app.NotificationManagerCompat&#10;&#10;// Helper functions for interval therapy calculations&#10;private fun calculateRemainingDoses(interval: IntervalnoUzimanje): Int {&#10;    val takenCount = interval.complianceHistory.size&#10;    return maxOf(0, interval.ukupnoUzimanja - takenCount)&#10;}&#10;&#10;private fun calculateNextDose(interval: IntervalnoUzimanje): String? {&#10;    // Scan scheduled times generated by IntervalnoUzimanje for today and following days&#10;    val now = java.util.Calendar.getInstance()&#10;    val dateFormat = java.text.SimpleDateFormat(&quot;dd-MM-yyyy&quot;, java.util.Locale.getDefault())&#10;    val dateTimeFormat = java.text.SimpleDateFormat(&quot;dd-MM-yyyy HH:mm&quot;, java.util.Locale.getDefault())&#10;&#10;    // Check up to the therapy duration days starting from today&#10;    for (dayOffset in 0 until interval.trajanjeDana) {&#10;        val cal = java.util.Calendar.getInstance()&#10;        cal.add(java.util.Calendar.DAY_OF_YEAR, dayOffset)&#10;        val dateStr = dateFormat.format(cal.time)&#10;        val times = interval.generirajVremenaZaDan(dateStr)&#10;&#10;        for (t in times) {&#10;            val parts = t.split(&quot;:&quot;)&#10;            if (parts.size &lt; 2) continue&#10;            val candidate = java.util.Calendar.getInstance()&#10;            candidate.time = cal.time&#10;            candidate.set(java.util.Calendar.HOUR_OF_DAY, parts[0].toInt())&#10;            candidate.set(java.util.Calendar.MINUTE, parts[1].toInt())&#10;            candidate.set(java.util.Calendar.SECOND, 0)&#10;            candidate.set(java.util.Calendar.MILLISECOND, 0)&#10;&#10;            if (candidate.timeInMillis &gt; now.timeInMillis) {&#10;                return dateTimeFormat.format(candidate.time)&#10;            }&#10;        }&#10;    }&#10;&#10;    return null&#10;}&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private lateinit var requestNotificationPermissionLauncher: ActivityResultLauncher&lt;String&gt;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        // Register permission launcher&#10;        requestNotificationPermissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted -&gt;&#10;            // No-op here; NotificationReceiver checks permission when posting&#10;        }&#10;&#10;        // Create notification channel&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val name = &quot;Podsjetnici&quot;&#10;            val descriptionText = &quot;Channel for medicine reminders&quot;&#10;            val importance = NotificationManager.IMPORTANCE_DEFAULT&#10;            val channel = NotificationChannel(NotificationScheduler.CHANNEL_ID, name, importance).apply {&#10;                description = descriptionText&#10;            }&#10;            val notificationManager: NotificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;&#10;        // Request POST_NOTIFICATIONS permission on Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            val permission = android.Manifest.permission.POST_NOTIFICATIONS&#10;            if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {&#10;                requestNotificationPermissionLauncher.launch(permission)&#10;            }&#10;        }&#10;&#10;        // Schedule reminders from saved prefs&#10;        val prefs = getSharedPreferences(&quot;e_lijekovi_prefs&quot;, Context.MODE_PRIVATE)&#10;        prefs.getString(&quot;reminder_jutro&quot;, null)?.let {&#10;            NotificationScheduler.scheduleDailyReminder(this, it, &quot;Jutro&quot;)&#10;        }&#10;        prefs.getString(&quot;reminder_podne&quot;, null)?.let {&#10;            NotificationScheduler.scheduleDailyReminder(this, it, &quot;Podne&quot;)&#10;        }&#10;        prefs.getString(&quot;reminder_vecer&quot;, null)?.let {&#10;            NotificationScheduler.scheduleDailyReminder(this, it, &quot;Večer&quot;)&#10;        }&#10;&#10;        setContent {&#10;            E_lijekovi_2Theme(&#10;                darkTheme = isSystemInDarkTheme(), // Eksplicitno koristimo system dark theme&#10;                dynamicColor = false // Onemogućeno da se forsiraju naše custom boje&#10;            ) {&#10;                PocetniEkran(context = this)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Dialog za dodavanje/uređivanje lijeka&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LijekDialog(&#10;    lijek: Lijek?,&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (Lijek) -&gt; Unit,&#10;    onDelete: (Lijek) -&gt; Unit&#10;) {&#10;    var naziv by remember { mutableStateOf(lijek?.naziv ?: &quot;&quot;) }&#10;    var doza by remember { mutableStateOf(lijek?.doza ?: &quot;&quot;) }&#10;    var jutro by remember { mutableStateOf(lijek?.jutro ?: false) }&#10;    var popodne by remember { mutableStateOf(lijek?.popodne ?: false) }&#10;    var vecer by remember { mutableStateOf(lijek?.vecer ?: false) }&#10;    var pakiranje by remember { mutableStateOf(lijek?.pakiranje?.toString() ?: &quot;30&quot;) }&#10;    var trenutnoStanje by remember { mutableStateOf(lijek?.trenutnoStanje?.toString() ?: &quot;30&quot;) }&#10;    var cijena by remember { mutableStateOf(lijek?.cijena ?: &quot;&quot;) }&#10;&#10;    var showIntervalDialog by remember { mutableStateOf(false) }&#10;    var showDeleteConfirm by remember { mutableStateOf(false) }&#10;&#10;    // KARTICA: Uredi lijek / Dodaj lijek&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(if (lijek == null) &quot;Dodaj lijek&quot; else &quot;Uredi lijek&quot;) },&#10;        text = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                modifier = Modifier.verticalScroll(rememberScrollState())&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = naziv,&#10;                    onValueChange = { naziv = it },&#10;                    label = { Text(&quot;Naziv lijeka&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = pakiranje,&#10;                        onValueChange = { pakiranje = it },&#10;                        label = { Text(&quot;Pak.&quot;) },&#10;                        placeholder = { Text(&quot;30&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    OutlinedTextField(&#10;                        value = doza,&#10;                        onValueChange = { doza = it },&#10;                        label = { Text(&quot;Doza&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    OutlinedTextField(&#10;                        value = trenutnoStanje,&#10;                        onValueChange = { trenutnoStanje = it },&#10;                        label = { Text(&quot;Stanje&quot;) },&#10;                        placeholder = { Text(&quot;30&quot;) },&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;                OutlinedTextField(&#10;                    value = cijena,&#10;                    onValueChange = { cijena = it },&#10;                    label = { Text(&quot;Cijena (opcionalno)&quot;) },&#10;                    singleLine = true,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Text(&quot;Vrijeme uzimanja:&quot;, fontWeight = FontWeight.Medium)&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Jutro&#10;                    Card(&#10;                        onClick = { jutro = !jutro },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = if (jutro) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),&#10;                            contentColor = MaterialTheme.colorScheme.onSurface&#10;                        ),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 10.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(2.dp)&#10;                        ) {&#10;                            Text(&quot;&quot;, fontSize = 28.sp)&#10;                            Text(&quot;Jutro&quot;, fontSize = 13.sp, fontWeight = FontWeight.Medium)&#10;                            Text(&#10;                                if (jutro) &quot;Uključeno&quot; else &quot;Isključeno&quot;,&#10;                                fontSize = 11.sp,&#10;                                fontWeight = if (jutro) FontWeight.Bold else FontWeight.Normal,&#10;                                color = if (jutro) MaterialTheme.colorScheme.primary else Color.Gray&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Podne&#10;                    Card(&#10;                        onClick = { popodne = !popodne },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = if (popodne) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),&#10;                            contentColor = MaterialTheme.colorScheme.onSurface&#10;                        ),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 10.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(2.dp)&#10;                        ) {&#10;                            Text(&quot;☀️&quot;, fontSize = 28.sp)&#10;                            Text(&quot;Podne&quot;, fontSize = 13.sp, fontWeight = FontWeight.Medium)&#10;                            Text(&#10;                                if (popodne) &quot;Uključeno&quot; else &quot;Isključeno&quot;,&#10;                                fontSize = 11.sp,&#10;                                fontWeight = if (popodne) FontWeight.Bold else FontWeight.Normal,&#10;                                color = if (popodne) MaterialTheme.colorScheme.primary else Color.Gray&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Večer&#10;                    Card(&#10;                        onClick = { vecer = !vecer },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = if (vecer) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),&#10;                            contentColor = MaterialTheme.colorScheme.onSurface&#10;                        ),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 10.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(2.dp)&#10;                        ) {&#10;                            Text(&quot;&quot;, fontSize = 28.sp)&#10;                            Text(&quot;Večer&quot;, fontSize = 13.sp, fontWeight = FontWeight.Medium)&#10;                            Text(&#10;                                if (vecer) &quot;Uključeno&quot; else &quot;Isključeno&quot;,&#10;                                fontSize = 11.sp,&#10;                                fontWeight = if (vecer) FontWeight.Bold else FontWeight.Normal,&#10;                                color = if (vecer) MaterialTheme.colorScheme.primary else Color.Gray&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Jednostavan gumb za intervalnu terapiju&#10;                if (lijek != null) {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Button(&#10;                        onClick = { showIntervalDialog = true },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    ) {&#10;                        Icon(Icons.Default.Schedule, contentDescription = null)&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;⏰ Postavi intervalno uzimanje&quot;)&#10;                    }&#10;&#10;                    // Prikaz trenutne intervalne terapije&#10;                    if (lijek.tipUzimanja == TipUzimanja.INTERVALNO &amp;&amp; lijek.intervalnoUzimanje != null) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surfaceVariant,&#10;                                contentColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            ),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp)&#10;                            ) {&#10;                                Text(&#10;                                    &quot;⏰ Aktivna intervalna terapija:&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.secondary&#10;                                )&#10;                                val interval = lijek.intervalnoUzimanje&#10;                                Text(&quot; ${interval.ukupnoUzimanja} kom, svakih ${interval.intervalSati}h&quot;)&#10;&#10;                                val preostalo = calculateRemainingDoses(interval)&#10;                                Text(&quot;⏳ Preostalo: $preostalo uzimanja&quot;)&#10;&#10;                                val nextTime = calculateNextDose(interval)&#10;                                if (nextTime != null) {&#10;                                    Text(&quot; Sljedeće: $nextTime&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    if (naziv.isNotBlank() &amp;&amp; doza.isNotBlank()) {&#10;                        val noviLijek = Lijek(&#10;                            id = lijek?.id ?: 0,&#10;                            naziv = naziv.trim(),&#10;                            doza = doza.trim(),&#10;                            napomene = lijek?.napomene ?: &quot;&quot;,&#10;                            jutro = jutro,&#10;                            popodne = popodne,&#10;                            vecer = vecer,&#10;                            pakiranje = pakiranje.toIntOrNull() ?: 30,&#10;                            trenutnoStanje = trenutnoStanje.toIntOrNull() ?: 30,&#10;                            boja = lijek?.boja ?: &quot;#4CAF50&quot;,&#10;                            tipUzimanja = lijek?.tipUzimanja ?: TipUzimanja.STANDARDNO,&#10;                            vrijemeJutro = lijek?.vrijemeJutro ?: &quot;08:00&quot;,&#10;                            vrijemePopodne = lijek?.vrijemePopodne ?: &quot;14:00&quot;,&#10;                            vrijemeVecer = lijek?.vrijemeVecer ?: &quot;20:00&quot;,&#10;                            intervalnoUzimanje = lijek?.intervalnoUzimanje,&#10;                            sortOrderJutro = lijek?.sortOrderJutro ?: 0,&#10;                            sortOrderPopodne = lijek?.sortOrderPopodne ?: 0,&#10;                            sortOrderVecer = lijek?.sortOrderVecer ?: 0,&#10;                            cijena = cijena.trim()&#10;                        )&#10;                        onSave(noviLijek)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;Spremi&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            Row {&#10;                TextButton(onClick = onDismiss) {&#10;                    Text(&quot;Odustani&quot;)&#10;                }&#10;                if (lijek != null) {&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    TextButton(onClick = { showDeleteConfirm = true }) {&#10;                        Text(&quot;Obriši&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    )&#10;&#10;    // Delete confirmation dialog (shown when user taps delete)&#10;    if (showDeleteConfirm &amp;&amp; lijek != null) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDeleteConfirm = false },&#10;            title = { Text(&quot;Potvrda brisanja&quot;) },&#10;            text = { Text(&quot;Jeste li sigurni da želite obrisati lijek '${lijek.naziv}'? Ova radnja se ne može poništiti.&quot;) },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    onDelete(lijek)&#10;                    showDeleteConfirm = false&#10;                    onDismiss()&#10;                }) {&#10;                    Text(&quot;Obriši&quot;, color = Color.Red)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDeleteConfirm = false }) {&#10;                    Text(&quot;Odustani&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    // Dialog za intervalnu terapiju&#10;    if (showIntervalDialog &amp;&amp; lijek != null) {&#10;        IntervalnaTerapijaDialog(&#10;            lijek = lijek,&#10;            onDismiss = { showIntervalDialog = false },&#10;            onSave = { updatedLijek -&gt;&#10;                onSave(updatedLijek)&#10;                showIntervalDialog = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;// Novi jednostavan dialog za intervalnu terapiju&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun IntervalnaTerapijaDialog(&#10;    lijek: Lijek,&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (Lijek) -&gt; Unit&#10;) {&#10;    var ukupnoKomada by remember { mutableStateOf(lijek.intervalnoUzimanje?.ukupnoUzimanja?.toString() ?: &quot;12&quot;) }&#10;    var intervalSati by remember { mutableStateOf(lijek.intervalnoUzimanje?.intervalSati?.toString() ?: &quot;8&quot;) }&#10;&#10;    // Date/time formatters&#10;    val dateFormatter = java.text.SimpleDateFormat(&quot;dd-MM-yyyy&quot;, java.util.Locale.getDefault())&#10;    val timeFormatter = java.text.SimpleDateFormat(&quot;HH:mm&quot;, java.util.Locale.getDefault())&#10;    val dateTimeFormatter = java.text.SimpleDateFormat(&quot;dd-MM-yyyy HH:mm&quot;, java.util.Locale.getDefault())&#10;&#10;    val todayCal = java.util.Calendar.getInstance()&#10;    val initialDate = lijek.intervalnoUzimanje?.startDateTime?.takeIf { it.isNotBlank() }?.let {&#10;        try { dateTimeFormatter.parse(it) } catch (_: Exception) { null }&#10;    } ?: todayCal.time&#10;&#10;    var pickedDate by remember { mutableStateOf(initialDate) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;&#10;    val prikazaniDatum = dateFormatter.format(pickedDate)&#10;    val prikazanoVrijeme = timeFormatter.format(pickedDate)&#10;&#10;    // KARTICA: Intervalno uzimanje (dialog)&#10;    AlertDialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant,&#10;                contentColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&#10;                    &quot;⏰ Intervalno uzimanje&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    &quot;Postavite raspored za ${lijek.naziv}:&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = ukupnoKomada,&#10;                        onValueChange = { ukupnoKomada = it },&#10;                        label = { Text(&quot;Ukupno komada&quot;) },&#10;                        placeholder = { Text(&quot;12&quot;) },&#10;                        leadingIcon = { Text(&quot;&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    OutlinedTextField(&#10;                        value = intervalSati,&#10;                        onValueChange = { intervalSati = it },&#10;                        label = { Text(&quot;Svakih (sati)&quot;) },&#10;                        placeholder = { Text(&quot;8&quot;) },&#10;                        leadingIcon = { Text(&quot;⏰&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = prikazaniDatum,&#10;                        onValueChange = {},&#10;                        label = { Text(&quot;Datum početka&quot;) },&#10;                        readOnly = true,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { showDatePicker = true }&#10;                    )&#10;&#10;                    OutlinedTextField(&#10;                        value = prikazanoVrijeme,&#10;                        onValueChange = {},&#10;                        label = { Text(&quot;Vrijeme početka&quot;) },&#10;                        readOnly = true,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { showTimePicker = true }&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // KARTICA: Intervalno uzimanje (pregled u dialogu)&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant, // Ovdje se postavlja pozadina kartice&#10;                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    ),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                ) {&#10;                    Column(modifier = Modifier.padding(12.dp)) {&#10;                        Text(&#10;                            &quot; Pregled:&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;&#10;                        val komada = ukupnoKomada.toIntOrNull() ?: 12&#10;                        val interval = intervalSati.toIntOrNull() ?: 8&#10;                        val trajanjeDana = (komada * interval) / 24.0&#10;&#10;                        Text(&quot;Početak: $prikazaniDatum $prikazanoVrijeme&quot;)&#10;                        Text(&quot; Ukupno: $komada komada&quot;)&#10;                        Text(&quot;⏰ Interval: svaki $interval h&quot;)&#10;                        Text(&quot; Trajanje: ${String.format(&quot;%.1f&quot;, trajanjeDana)} dana&quot;)&#10;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        // Prikaži samo jedan sljedeći termin unutar 24 sata, prema intervalu&#10;                        val nextTerm = remember(pickedDate, interval) {&#10;                            val cal = java.util.Calendar.getInstance()&#10;                            cal.time = pickedDate&#10;                            val now = java.util.Calendar.getInstance()&#10;                            val formatter = java.text.SimpleDateFormat(&quot;HH:mm&quot;, java.util.Locale.getDefault())&#10;                            var result: String? = null&#10;                            repeat(komada) {&#10;                                val diff = cal.timeInMillis - now.timeInMillis&#10;                                if (diff &gt;= 0 &amp;&amp; diff &lt; 24*60*60*1000) {&#10;                                    result = formatter.format(cal.time)&#10;                                    return@repeat&#10;                                }&#10;                                cal.add(java.util.Calendar.HOUR_OF_DAY, interval)&#10;                            }&#10;                            result&#10;                        }&#10;                        if (nextTerm != null) {&#10;                            Text(&quot; Sljedeći termin: $nextTerm&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                        } else {&#10;                            Text(&quot;Nema termina unutar 24h&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                        }&#10;                    }&#10;                }&#10;                // === KRAJ KARTICE ZA PREGLED INTERVALNE TERAPIJE U DIALOGU ===&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                // Gumbi horizontalno, vizualno poboljšani&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(&quot;Odustani&quot;, fontWeight = FontWeight.Medium)&#10;                    }&#10;                    TextButton(onClick = {&#10;                        val updatedLijek = lijek.copy(&#10;                            tipUzimanja = TipUzimanja.STANDARDNO,&#10;                            intervalnoUzimanje = null&#10;                        )&#10;                        onSave(updatedLijek)&#10;                        onDismiss()&#10;                    }) {&#10;                        Text(&quot;Isključi&quot;, fontWeight = FontWeight.Medium, color = Color.Red)&#10;                    }&#10;                    Button(onClick = {&#10;                        val ukupno = ukupnoKomada.toIntOrNull() ?: 12&#10;                        val interval = intervalSati.toIntOrNull() ?: 8&#10;                        val trajanje = (ukupno * interval / 24.0).toInt().coerceAtLeast(1)&#10;                        val startDateTime = dateTimeFormatter.format(pickedDate)&#10;&#10;                        val novaIntervalnaTerapija = IntervalnoUzimanje(&#10;                            intervalSati = interval,&#10;                            startDateTime = startDateTime,&#10;                            trajanjeDana = trajanje,&#10;                            complianceHistory = emptyList(),&#10;                            ukupnoUzimanja = ukupno&#10;                        )&#10;&#10;                        val updatedLijek = lijek.copy(&#10;                            tipUzimanja = TipUzimanja.INTERVALNO,&#10;                            intervalnoUzimanje = novaIntervalnaTerapija,&#10;                            jutro = false,&#10;                            popodne = false,&#10;                            vecer = false&#10;                        )&#10;&#10;                        onSave(updatedLijek)&#10;                    }, colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)) {&#10;                        Text(&quot;Započni&quot;, fontWeight = FontWeight.Bold, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // DatePicker dialog implemented via AndroidView inside AlertDialog (ali izvan Card-a!)&#10;    if (showDatePicker) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showDatePicker = false }) { Text(&quot;Odaberi&quot;) }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) { Text(&quot;Odustani&quot;) }&#10;            },&#10;            text = {&#10;                val cal = java.util.Calendar.getInstance()&#10;                cal.time = pickedDate&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.DatePicker(ctx).apply {&#10;                            init(&#10;                                cal.get(java.util.Calendar.YEAR),&#10;                                cal.get(java.util.Calendar.MONTH),&#10;                                cal.get(java.util.Calendar.DAY_OF_MONTH)&#10;                            ) { _, year, month, dayOfMonth -&gt;&#10;                                val newCal = java.util.Calendar.getInstance()&#10;                                newCal.time = pickedDate&#10;                                newCal.set(year, month, dayOfMonth)&#10;                                pickedDate = newCal.time&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;    // TimePicker dialog via AndroidView (izvan Card-a!)&#10;    if (showTimePicker) {&#10;        AlertDialog(&#10;            onDismissRequest = { showTimePicker = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showTimePicker = false }) { Text(&quot;Odaberi&quot;) }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showTimePicker = false }) { Text(&quot;Odustani&quot;) }&#10;            },&#10;            text = {&#10;                val cal = java.util.Calendar.getInstance()&#10;                cal.time = pickedDate&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.TimePicker(ctx).apply {&#10;                            setIs24HourView(true)&#10;                            try {&#10;                                hour = cal.get(java.util.Calendar.HOUR_OF_DAY)&#10;                                minute = cal.get(java.util.Calendar.MINUTE)&#10;                            } catch (_: Throwable) { }&#10;                            setOnTimeChangedListener { _, hourOfDay, minute -&gt;&#10;                                val newCal = java.util.Calendar.getInstance()&#10;                                newCal.time = pickedDate&#10;                                newCal.set(java.util.Calendar.HOUR_OF_DAY, hourOfDay)&#10;                                newCal.set(java.util.Calendar.MINUTE, minute)&#10;                                pickedDate = newCal.time&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StatisticsScreen(&#10;    lijekovi: List&lt;Lijek&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        Text(&#10;            &quot;Statistike i compliance&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .shadow(&#10;                    elevation = 2.dp,&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)&#10;                )&#10;                .clip(RoundedCornerShape(12.dp)),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    &quot; Osnovne statistike&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&quot;Ukupno lijekova: ${lijekovi.size}&quot;)&#10;                Text(&quot;Jutarnji lijekovi: ${lijekovi.count { it.jutro }}&quot;)&#10;                Text(&quot;Popodnevni lijekovi: ${lijekovi.count { it.popodne }}&quot;)&#10;                Text(&quot;Večernji lijekovi: ${lijekovi.count { it.vecer }}&quot;)&#10;                Text(&quot;Intervalni lijekovi: ${lijekovi.count { it.tipUzimanja == TipUzimanja.INTERVALNO }}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingsScreen(&#10;    onExportImport: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    // Notification enabled check&#10;    val notificationsEnabled = remember { NotificationManagerCompat.from(context).areNotificationsEnabled() }&#10;&#10;    // Load saved reminder times from SharedPreferences (format HH:mm)&#10;    val prefs = remember { context.getSharedPreferences(&quot;e_lijekovi_prefs&quot;, Context.MODE_PRIVATE) }&#10;    var jutroTime by remember { mutableStateOf(prefs.getString(&quot;reminder_jutro&quot;, &quot;08:00&quot;) ?: &quot;08:00&quot;) }&#10;    var podneTime by remember { mutableStateOf(prefs.getString(&quot;reminder_podne&quot;, &quot;14:00&quot;) ?: &quot;14:00&quot;) }&#10;    var vecerTime by remember { mutableStateOf(prefs.getString(&quot;reminder_vecer&quot;, &quot;20:00&quot;) ?: &quot;20:00&quot;) }&#10;&#10;    var showTimePickerJutro by remember { mutableStateOf(false) }&#10;    var showTimePickerPodne by remember { mutableStateOf(false) }&#10;    var showTimePickerVecer by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&#10;            &quot;Postavke&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Button(&#10;            onClick = onExportImport,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Upravljanje podacima&quot;)&#10;        }&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .shadow(&#10;                    elevation = 1.dp,&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)&#10;                )&#10;                .clip(RoundedCornerShape(12.dp)),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    &quot;ℹ️ Pomoć za Import&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&#10;                    &quot;• Datoteka mora biti .json format\n&quot; +&#10;                    &quot;• JSON mora biti array [ ... ]\n&quot; +&#10;                    &quot;• Struktura mora odgovarati Lijek klasi\n&quot; +&#10;                    &quot;• Koristite 'Export/Import' za provjeru&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        // Podsjetnici card&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .shadow(&#10;                    elevation = 1.dp,&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.06f)&#10;                )&#10;                .clip(RoundedCornerShape(12.dp)),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                Text(&quot; Podsjetnici&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)&#10;                Text(&quot;Podesi vrijeme za jutarnju, podnevnu i večernju notifikaciju.&quot;)&#10;&#10;                // Notification status row&#10;                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&quot;Status notifikacija&quot;, fontWeight = FontWeight.Medium)&#10;                        Text(if (notificationsEnabled) &quot;Uključeno&quot; else &quot;Isključeno&quot;, color = if (notificationsEnabled) MaterialTheme.colorScheme.primary else Color.Red)&#10;                    }&#10;                    Button(onClick = {&#10;                        // Open app notification settings&#10;                        val intent = Intent().apply {&#10;                            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                                action = Settings.ACTION_APP_NOTIFICATION_SETTINGS&#10;                                putExtra(Settings.EXTRA_APP_PACKAGE, context.packageName)&#10;                            } else {&#10;                                action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS&#10;                                data = Uri.fromParts(&quot;package&quot;, context.packageName, null)&#10;                            }&#10;                        }&#10;                        context.startActivity(intent)&#10;                    }) {&#10;                        Text(&quot;Otvori postavke&quot;)&#10;                    }&#10;                }&#10;&#10;                // Jutro row&#10;                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&quot;Jutro&quot;, fontWeight = FontWeight.Medium)&#10;                        Text(jutroTime, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                    Button(onClick = { showTimePickerJutro = true }) { Text(&quot;Odaberi&quot;) }&#10;                }&#10;&#10;                // Podne row&#10;                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&quot;Podne&quot;, fontWeight = FontWeight.Medium)&#10;                        Text(podneTime, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                    Button(onClick = { showTimePickerPodne = true }) { Text(&quot;Odaberi&quot;) }&#10;                }&#10;&#10;                // Večer row&#10;                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&quot;Večer&quot;, fontWeight = FontWeight.Medium)&#10;                        Text(vecerTime, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                    Button(onClick = { showTimePickerVecer = true }) { Text(&quot;Odaberi&quot;) }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&quot;Napomena: Ovdje se postavlja vrijeme podsjetnika; sama zakazivanja notifikacija/alarma bit će implementirana zasebno.&quot;, style = MaterialTheme.typography.bodySmall)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Time pickers implemented as AlertDialog with AndroidView TimePicker (reused pattern)&#10;    if (showTimePickerJutro) {&#10;        AlertDialog(&#10;            onDismissRequest = { showTimePickerJutro = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showTimePickerJutro = false }) { Text(&quot;Zatvori&quot;) }&#10;            },&#10;            text = {&#10;                val parts = jutroTime.split(&quot;:&quot;)&#10;                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 8&#10;                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.TimePicker(ctx).apply {&#10;                            setIs24HourView(true)&#10;                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}&#10;                            this.hour = hour&#10;                            this.minute = minute&#10;                            setOnTimeChangedListener { _, h, m -&gt;&#10;                                val hh = if (h &lt; 10) &quot;0$h&quot; else &quot;$h&quot;&#10;                                val mm = if (m &lt; 10) &quot;0$m&quot; else &quot;$m&quot;&#10;                                jutroTime = &quot;$hh:$mm&quot;&#10;                                prefs.edit().putString(&quot;reminder_jutro&quot;, jutroTime).apply()&#10;                                // Schedule or reschedule the daily reminder&#10;                                NotificationScheduler.scheduleDailyReminder(context, jutroTime, &quot;Jutro&quot;)&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showTimePickerPodne) {&#10;        AlertDialog(&#10;            onDismissRequest = { showTimePickerPodne = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showTimePickerPodne = false }) { Text(&quot;Zatvori&quot;) }&#10;            },&#10;            text = {&#10;                val parts = podneTime.split(&quot;:&quot;)&#10;                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 14&#10;                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.TimePicker(ctx).apply {&#10;                            setIs24HourView(true)&#10;                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}&#10;                            this.hour = hour&#10;                            this.minute = minute&#10;                            setOnTimeChangedListener { _, h, m -&gt;&#10;                                val hh = if (h &lt; 10) &quot;0$h&quot; else &quot;$h&quot;&#10;                                val mm = if (m &lt; 10) &quot;0$m&quot; else &quot;$m&quot;&#10;                                podneTime = &quot;$hh:$mm&quot;&#10;                                prefs.edit().putString(&quot;reminder_podne&quot;, podneTime).apply()&#10;                                // Schedule or reschedule the daily reminder&#10;                                NotificationScheduler.scheduleDailyReminder(context, podneTime, &quot;Podne&quot;)&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showTimePickerVecer) {&#10;        AlertDialog(&#10;            onDismissRequest = { showTimePickerVecer = false },&#10;            confirmButton = {&#10;                TextButton(onClick = { showTimePickerVecer = false }) { Text(&quot;Zatvori&quot;) }&#10;            },&#10;            text = {&#10;                val parts = vecerTime.split(&quot;:&quot;)&#10;                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 20&#10;                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0&#10;                AndroidView(&#10;                    factory = { ctx -&gt;&#10;                        android.widget.TimePicker(ctx).apply {&#10;                            setIs24HourView(true)&#10;                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}&#10;                            this.hour = hour&#10;                            this.minute = minute&#10;                            setOnTimeChangedListener { _, h, m -&gt;&#10;                                val hh = if (h &lt; 10) &quot;0$h&quot; else &quot;$h&quot;&#10;                                val mm = if (m &lt; 10) &quot;0$m&quot; else &quot;$m&quot;&#10;                                vecerTime = &quot;$hh:$mm&quot;&#10;                                prefs.edit().putString(&quot;reminder_vecer&quot;, vecerTime).apply()&#10;                                // Schedule or reschedule the daily reminder&#10;                                NotificationScheduler.scheduleDailyReminder(context, vecerTime, &quot;Večer&quot;)&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PocetniEkran(context: Context? = null) {&#10;    val lijekovi = remember { mutableStateListOf&lt;Lijek&gt;() }&#10;    var idCounter by rememberSaveable { mutableIntStateOf(0) }&#10;    var editLijek by remember { mutableStateOf&lt;Lijek?&gt;(null) }&#10;    var showAddLijek by remember { mutableStateOf(false) }&#10;    var showExportImportDialog by remember { mutableStateOf(false) }&#10;    var showMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentScreen by remember { mutableStateOf(&quot;home&quot;) }&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    val saveData = {&#10;        context?.let { ctx -&gt;&#10;            LijekoviDataManager.saveToLocalStorage(ctx, lijekovi)&#10;        }&#10;        Unit&#10;    }&#10;&#10;    // Enhanced add with highlight animation&#10;    val handleAddLijek: (Lijek) -&gt; Unit = { newLijek -&gt;&#10;        val lijekWithId = newLijek.copy(id = idCounter++)&#10;        lijekovi.add(lijekWithId)&#10;        saveData()&#10;        showAddLijek = false&#10;&#10;        scope.launch {&#10;            snackbarHostState.showSnackbar(&#10;                message = &quot;Terapija '${newLijek.naziv}' dodana&quot;,&#10;                actionLabel = &quot;Uredi&quot;,&#10;                duration = SnackbarDuration.Short&#10;            ).also { result -&gt;&#10;                if (result == SnackbarResult.ActionPerformed) {&#10;                    editLijek = lijekWithId&#10;                }&#10;            }&#10;&#10;            // Clear highlight after animation&#10;            kotlinx.coroutines.delay(1000)&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        context?.let { ctx -&gt;&#10;            val loadedLijekovi = LijekoviDataManager.loadFromLocalStorage(ctx)&#10;            if (loadedLijekovi != null &amp;&amp; loadedLijekovi.isNotEmpty()) {&#10;                lijekovi.clear()&#10;                lijekovi.addAll(loadedLijekovi)&#10;                idCounter = (loadedLijekovi.maxOfOrNull { it.id } ?: -1) + 1&#10;            }&#10;        }&#10;    }&#10;&#10;    val exportLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.CreateDocument(&quot;application/json&quot;)&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            context?.let { ctx -&gt;&#10;                val success = LijekoviDataManager.saveToFile(ctx, it, lijekovi)&#10;                showMessage = if (success) &quot;Podaci uspješno eksportirani!&quot; else &quot;Greška pri exportu!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    val importLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.OpenDocument()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            context?.let { ctx -&gt;&#10;                try {&#10;                    val importedLijekovi = LijekoviDataManager.loadFromFile(ctx, it)&#10;                    if (importedLijekovi != null) {&#10;                        lijekovi.clear()&#10;                        lijekovi.addAll(importedLijekovi)&#10;                        idCounter = (importedLijekovi.maxOfOrNull { lijek -&gt; lijek.id } ?: -1) + 1&#10;                        saveData()&#10;                        currentScreen = &quot;home&quot;&#10;                        showMessage = &quot;✅ Podaci uspješno importirani!\n\nUčitano ${importedLijekovi.size} lijekova.&quot;&#10;                    } else {&#10;                        showMessage = &quot;&quot;&quot;&#10;                            ❌ Greška pri importu podataka!&#10;                            &#10;                            Mogući uzroci:&#10;                            • Datoteka nije valjani JSON format&#10;                            • JSON ne odgovara strukturi aplikacije  &#10;                            • Datoteka je oštećena ili prazna&#10;                            • Nema dozvolu za čitanje datoteke&#10;                            &#10;                             Savjet: Pokušajte exportirati podatke iz aplikacije pa ih importirati nazad da testirate format.&#10;                            &#10;                             Za detaljne informacije provjerite Logcat (filtriraj: LijekoviDataManager)&#10;                        &quot;&quot;&quot;.trimIndent()&#10;                    }&#10;                } catch (e: Exception) {&#10;                    showMessage = &quot;&quot;&quot;&#10;                        ❌ Neočekivana greška pri importu!&#10;                        &#10;                        Greška: ${e.message ?: &quot;Nepoznata greška&quot;}&#10;                        &#10;                         Provjerite:&#10;                        • Je li datoteka ispravno eksportirana iz aplikacije&#10;                        • Imate li dozvolu za čitanje datoteke&#10;                        • Nije li datoteka oštećena&#10;                    &quot;&quot;&quot;.trimIndent()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    showMessage?.let { message -&gt;&#10;        AlertDialog(&#10;            onDismissRequest = { showMessage = null },&#10;            title = { Text(&quot;Obavijest&quot;) },&#10;            text = { Text(message) },&#10;            confirmButton = {&#10;                TextButton(onClick = { showMessage = null }) {&#10;                    Text(&quot;U redu&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showExportImportDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showExportImportDialog = false },&#10;            title = { Text(&quot;Upravljanje podacima&quot;) },&#10;            text = {&#10;                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                    Text(&quot;Odaberite akciju:&quot;)&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                    Button(&#10;                        onClick = {&#10;                            showExportImportDialog = false&#10;                            exportLauncher.launch(&quot;lijekovi_backup.json&quot;)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&quot;Exportaj podatke&quot;)&#10;                    }&#10;                    Button(&#10;                        onClick = {&#10;                            showExportImportDialog = false&#10;                            importLauncher.launch(arrayOf(&quot;application/json&quot;))&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&quot;Importaj podatke&quot;)&#10;                    }&#10;                    Button(&#10;                        onClick = {&#10;                            lijekovi.clear()&#10;                            saveData()&#10;                            showExportImportDialog = false&#10;                            showMessage = &quot;Svi podaci su uspješno obrisani!&quot;&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(containerColor = Color.Red)&#10;                    ) {&#10;                        Text(&quot;Obriši sve podatke&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showExportImportDialog = false }) {&#10;                Text(&quot;Odustani&quot;)&#10;            }&#10;        })&#10;    }&#10;&#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        drawerContent = {&#10;            ModalDrawerSheet {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;e-LijekoviHR&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.padding(vertical = 16.dp)&#10;                    )&#10;&#10;                    Divider(modifier = Modifier.padding(bottom = 8.dp))&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(Icons.Default.Home, contentDescription = &quot;Početna&quot;) },&#10;                        label = { Text(&quot;Početna&quot;) },&#10;                        selected = currentScreen == &quot;home&quot;,&#10;                        onClick = {&#10;                            currentScreen = &quot;home&quot;&#10;                            scope.launch { drawerState.close() }&#10;                        },&#10;                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)&#10;                    )&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(Icons.Default.Analytics, contentDescription = &quot;Statistike&quot;) },&#10;                        label = { Text(&quot;Statistike&quot;) },&#10;                        selected = currentScreen == &quot;statistics&quot;,&#10;                        onClick = {&#10;                            currentScreen = &quot;statistics&quot;&#10;                            scope.launch { drawerState.close() }&#10;                        },&#10;                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)&#10;                    )&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(Icons.Default.Settings, contentDescription = &quot;Postavke&quot;) },&#10;                        label = { Text(&quot;Postavke&quot;) },&#10;                        selected = currentScreen == &quot;settings&quot;,&#10;                        onClick = {&#10;                            currentScreen = &quot;settings&quot;&#10;                            scope.launch { drawerState.close() }&#10;                        },&#10;                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)&#10;                    )&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(Icons.Default.Info, contentDescription = &quot;O aplikaciji&quot;) },&#10;                        label = { Text(&quot;O aplikaciji&quot;) },&#10;                        selected = currentScreen == &quot;about&quot;,&#10;                        onClick = {&#10;                            currentScreen = &quot;about&quot;&#10;                            scope.launch { drawerState.close() }&#10;                        },&#10;                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    title = {&#10;                        Text(&#10;                            when (currentScreen) {&#10;                                &quot;home&quot; -&gt; &quot;Moji lijekovi&quot;&#10;                                &quot;statistics&quot; -&gt; &quot;Statistike&quot;&#10;                                &quot;settings&quot; -&gt; &quot;Postavke&quot;&#10;                                &quot;about&quot; -&gt; &quot;O aplikaciji&quot;&#10;                                else -&gt; &quot;e-LijekoviHR&quot;&#10;                            }&#10;                        )&#10;                    },&#10;                    navigationIcon = {&#10;                        IconButton(&#10;                            onClick = {&#10;                                scope.launch { drawerState.open() }&#10;                            }&#10;                        ) {&#10;                            Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            floatingActionButton = {&#10;                if (currentScreen == &quot;home&quot;) {&#10;                    AnimatedFAB(&#10;                        isExpanded = showAddLijek,&#10;                        onClick = { showAddLijek = true }&#10;                    )&#10;                }&#10;            },&#10;            snackbarHost = {&#10;                SnackbarHost(hostState = snackbarHostState)&#10;            }&#10;        ) { paddingValues -&gt;&#10;            when (currentScreen) {&#10;                &quot;home&quot; -&gt; {&#10;                    HomeScreen(&#10;                        lijekovi = lijekovi,&#10;                        onTake = { lijek -&gt;&#10;                            val grupa = when {&#10;                                lijek.jutro -&gt; DobaDana.JUTRO&#10;                                lijek.popodne -&gt; DobaDana.POPODNE&#10;                                lijek.vecer -&gt; DobaDana.VECER&#10;                                else -&gt; null&#10;                            }&#10;                            if (grupa != null &amp;&amp; lijek.mozeUzeti(grupa)) {&#10;                                lijekovi[lijekovi.indexOf(lijek)] = lijek.uzmiLijek(grupa)&#10;                                saveData()&#10;                                scope.launch {&#10;                                    snackbarHostState.showSnackbar(&#10;                                        &quot;Uspješno uzeto: ${lijek.naziv}&quot;,&#10;                                        duration = SnackbarDuration.Short&#10;                                    )&#10;                                }&#10;                            } else {&#10;                                scope.launch {&#10;                                    snackbarHostState.showSnackbar(&#10;                                        &quot;Nije moguće uzeti dozu za ${lijek.naziv}&quot;,&#10;                                        duration = SnackbarDuration.Short&#10;                                    )&#10;                                }&#10;                            }&#10;                        },&#10;                        onEdit = { lijek -&gt; editLijek = lijek },&#10;                        modifier = Modifier.padding(paddingValues)&#10;                    )&#10;                }&#10;                &quot;statistics&quot; -&gt; {&#10;                    StatisticsScreen(&#10;                        lijekovi = lijekovi,&#10;                        modifier = Modifier.padding(paddingValues)&#10;                    )&#10;                }&#10;                &quot;settings&quot; -&gt; {&#10;                    SettingsScreen(&#10;                        onExportImport = { showExportImportDialog = true },&#10;                        modifier = Modifier.padding(paddingValues)&#10;                    )&#10;                }&#10;                &quot;about&quot; -&gt; {&#10;                    AboutScreen(modifier = Modifier.padding(paddingValues))&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAddLijek) {&#10;        LijekDialog(&#10;            lijek = null,&#10;            onDismiss = { showAddLijek = false },&#10;            onSave = { newLijek -&gt;&#10;                 val duplicate = lijekovi.any {&#10;                     it.naziv.lowercase() == newLijek.naziv.lowercase()&#10;                 }&#10;&#10;                 if (duplicate) {&#10;                     scope.launch {&#10;                         snackbarHostState.showSnackbar(&#10;                             message = &quot;Lijek '${newLijek.naziv}' već postoji!&quot;,&#10;                             duration = SnackbarDuration.Short&#10;                         )&#10;                     }&#10;                     return@LijekDialog&#10;                 }&#10;&#10;                 handleAddLijek(newLijek)&#10;             }&#10;            , onDelete = { /* no-op for add dialog */ }&#10;        )&#10;     }&#10;&#10;     editLijek?.let { lijek -&gt;&#10;         LijekDialog(&#10;             lijek = lijek,&#10;             onDismiss = { editLijek = null },&#10;             onSave = { updatedLijek -&gt;&#10;                 val duplicate = lijekovi.any {&#10;                     it.id != lijek.id &amp;&amp; it.naziv.lowercase() == updatedLijek.naziv.lowercase()&#10;                 }&#10;&#10;                 if (duplicate) {&#10;                     scope.launch {&#10;                         snackbarHostState.showSnackbar(&#10;                             message = &quot;Lijek '${updatedLijek.naziv}' već postoji!&quot;,&#10;                             duration = SnackbarDuration.Short&#10;                         )&#10;                     }&#10;                     return@LijekDialog&#10;                 }&#10;&#10;                 val index = lijekovi.indexOfFirst { it.id == lijek.id }&#10;                 if (index != -1) {&#10;                     lijekovi[index] = updatedLijek&#10;                     saveData()&#10;&#10;                     scope.launch {&#10;                         snackbarHostState.showSnackbar(&#10;                             message = &quot;Lijek '${updatedLijek.naziv}' ažuriran&quot;,&#10;                             duration = SnackbarDuration.Short&#10;                         )&#10;                     }&#10;                 }&#10;                 editLijek = null&#10;             }&#10;            , onDelete = { deletedLijek -&gt;&#10;                val idx = lijekovi.indexOfFirst { it.id == deletedLijek.id }&#10;                if (idx != -1) {&#10;                    // Remove and keep a reference to the removed item so we can restore it on Undo&#10;                    val removed = lijekovi.removeAt(idx)&#10;                    saveData()&#10;                    scope.launch {&#10;                        // Show snackbar with 'Poništi' action to allow undoing the delete&#10;                        val result = snackbarHostState.showSnackbar(&#10;                            message = &quot;Lijek '${removed.naziv}' obrisan&quot;,&#10;                            actionLabel = &quot;Poništi&quot;,&#10;                            duration = SnackbarDuration.Short&#10;                        )&#10;&#10;                        if (result == SnackbarResult.ActionPerformed) {&#10;                            // Reinsert the removed item at its previous index (or end if index out of range)&#10;                            val insertIndex = if (idx &lt;= lijekovi.size) idx else lijekovi.size&#10;                            lijekovi.add(insertIndex, removed)&#10;                            saveData()&#10;                        }&#10;                    }&#10;                }&#10;                editLijek = null&#10;            }&#10;        )&#10;     }&#10;}&#10;&#10;// Enhanced HomeScreen with new animated components&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AnimatedFAB(&#10;    isExpanded: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isExpanded) 45f else 0f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessMedium&#10;        ),&#10;        label = &quot;fab_rotation&quot;&#10;    )&#10;&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = modifier,&#10;        containerColor = MaterialTheme.colorScheme.primary&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Add,&#10;            contentDescription = &quot;Dodaj lijek&quot;,&#10;            modifier = Modifier.graphicsLayer(rotationZ = rotation)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    lijekovi: List&lt;Lijek&gt;,&#10;    onTake: (Lijek) -&gt; Unit,&#10;    onEdit: (Lijek) -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    scaffoldPadding: PaddingValues = PaddingValues(0.dp)&#10;) {&#10;    val grupe = listOf(&#10;        DobaDana.JUTRO to &quot;Jutro&quot;,&#10;        DobaDana.POPODNE to &quot;Podne&quot;,&#10;        DobaDana.VECER to &quot;Večer&quot;&#10;    )&#10;    val skipSnackbarOnTakeAll = remember { mutableStateOf(false) }&#10;    LazyColumn(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(18.dp),&#10;        contentPadding = PaddingValues(&#10;            bottom = scaffoldPadding.calculateBottomPadding()&#10;                + WindowInsets.navigationBars.asPaddingValues().calculateBottomPadding()&#10;                + 16.dp // internal margin&#10;        )&#10;    ) {&#10;        grupe.forEach { (doba, naziv) -&gt;&#10;            val grupaLijekova = lijekovi.filter {&#10;                when (doba) {&#10;                    DobaDana.JUTRO -&gt; it.jutro&#10;                    DobaDana.POPODNE -&gt; it.popodne&#10;                    DobaDana.VECER -&gt; it.vecer&#10;                }&#10;            }&#10;            if (grupaLijekova.isNotEmpty()) {&#10;                item {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(vertical = 10.dp)&#10;                    ) {&#10;                        val ikona = when (doba) {&#10;                            DobaDana.JUTRO -&gt; Icons.Default.WbSunny&#10;                            DobaDana.POPODNE -&gt; Icons.Default.WbTwilight&#10;                            DobaDana.VECER -&gt; Icons.Default.NightsStay&#10;                        }&#10;                        Icon(&#10;                            imageVector = ikona,&#10;                            contentDescription = naziv,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(28.dp).padding(end = 10.dp)&#10;                        )&#10;                        Text(&#10;                            text = naziv,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.padding(end = 12.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                        val mozeUzetiNetko = grupaLijekova.any { it.mozeUzeti(doba) &amp;&amp; !it.jeUzetZaDanas() &amp;&amp; it.trenutnoStanje &gt; 0 }&#10;                        Button(&#10;                            onClick = {&#10;                                skipSnackbarOnTakeAll.value = true&#10;                                grupaLijekova.forEach {&#10;                                    if (it.mozeUzeti(doba) &amp;&amp; !it.jeUzetZaDanas() &amp;&amp; it.trenutnoStanje &gt; 0) onTake(it)&#10;                                }&#10;                                skipSnackbarOnTakeAll.value = false&#10;                            },&#10;                            enabled = mozeUzetiNetko,&#10;                            modifier = Modifier&#10;                                .height(38.dp)&#10;                                .padding(vertical = 2.dp)&#10;                        ) {&#10;                            Text(&quot;Uzmi sve&quot;, fontSize = 15.sp)&#10;                        }&#10;                    }&#10;                }&#10;                items(grupaLijekova.size) { idx -&gt;&#10;                    val lijek = grupaLijekova[idx]&#10;                    Box(modifier = Modifier.clickable { onEdit(lijek) }) {&#10;                        LijekCard(&#10;                            lijek = lijek,&#10;                            onTake = {&#10;                                if (!skipSnackbarOnTakeAll.value) onTake(lijek)&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .then(if (idx == grupaLijekova.lastIndex) Modifier.padding(bottom = 16.dp) else Modifier)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // Dodaj &quot;Intervalno&quot; grupu za intervalne lijekove&#10;        val intervalniLijekovi = lijekovi.filter {&#10;            it.tipUzimanja == TipUzimanja.INTERVALNO&#10;        }&#10;        if (intervalniLijekovi.isNotEmpty()) {&#10;            item {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 10.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Schedule,&#10;                        contentDescription = &quot;Intervalno&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(28.dp).padding(end = 10.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Intervalno&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.padding(end = 12.dp)&#10;                    )&#10;                }&#10;            }&#10;            items(intervalniLijekovi.size) { idx -&gt;&#10;                val lijek = intervalniLijekovi[idx]&#10;                Box(modifier = Modifier.clickable { onEdit(lijek) }) {&#10;                    LijekCard(&#10;                        lijek = lijek,&#10;                        onTake = {&#10;                            if (!skipSnackbarOnTakeAll.value) onTake(lijek)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;        // Dodaj &quot;Ostali&quot; grupu za lijekove bez termina i koji nisu intervalni&#10;        val ostaliLijekovi = lijekovi.filter {&#10;            !it.jutro &amp;&amp; !it.popodne &amp;&amp; !it.vecer &amp;&amp; it.tipUzimanja != TipUzimanja.INTERVALNO&#10;        }&#10;        if (ostaliLijekovi.isNotEmpty()) {&#10;            item {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 10.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MedicalServices,&#10;                        contentDescription = &quot;Ostali&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(28.dp).padding(end = 10.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Ostali&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.padding(end = 12.dp)&#10;                    )&#10;                }&#10;            }&#10;            items(ostaliLijekovi.size) { idx -&gt;&#10;                val lijek = ostaliLijekovi[idx]&#10;                Box(modifier = Modifier.clickable { onEdit(lijek) }) {&#10;                    LijekCard(&#10;                        lijek = lijek,&#10;                        onTake = {&#10;                            if (!skipSnackbarOnTakeAll.value) onTake(lijek)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AboutScreen(modifier: Modifier = Modifier) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            &quot;O aplikaciji&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .shadow(&#10;                    elevation = 2.dp,&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)&#10;                )&#10;                .clip(RoundedCornerShape(12.dp)),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    &quot;e-LijekoviHR&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&quot;Verzija: ${&quot;1.1.1&quot;}&quot;)&#10;                Text(&quot;Hrvatska aplikacija za praćenje lijekova&quot;)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&quot;Značajke:&quot;)&#10;                Text(&quot;• Praćenje standardnih lijekova&quot;)&#10;                Text(&quot;• Napredni intervalni doziranje&quot;)&#10;                Text(&quot;• Compliance statistike&quot;)&#10;                Text(&quot;• Export/Import podataka&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>