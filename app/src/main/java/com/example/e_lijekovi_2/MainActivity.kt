package com.example.e_lijekovi_2

import android.os.Bundle
import android.content.Context
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.Spring
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.material3.FilterChip
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import com.example.e_lijekovi_2.ui.theme.E_lijekovi_2Theme
import kotlinx.coroutines.launch
import kotlin.math.roundToInt

// Helper functions for interval therapy calculations
private fun calculateRemainingDoses(interval: IntervalnoUzimanje): Int {
    val takenCount = interval.complianceHistory.size
    return maxOf(0, interval.ukupnoUzimanja - takenCount)
}

private fun calculateNextDose(interval: IntervalnoUzimanje): String? {
    // Scan scheduled times generated by IntervalnoUzimanje for today and following days
    val now = java.util.Calendar.getInstance()
    val dateFormat = java.text.SimpleDateFormat("dd-MM-yyyy", java.util.Locale.getDefault())
    val dateTimeFormat = java.text.SimpleDateFormat("dd-MM-yyyy HH:mm", java.util.Locale.getDefault())

    // Check up to the therapy duration days starting from today
    for (dayOffset in 0 until interval.trajanjeDana) {
        val cal = java.util.Calendar.getInstance()
        cal.add(java.util.Calendar.DAY_OF_YEAR, dayOffset)
        val dateStr = dateFormat.format(cal.time)
        val times = interval.generirajVremenaZaDan(dateStr)

        for (t in times) {
            val parts = t.split(":")
            if (parts.size < 2) continue
            val candidate = java.util.Calendar.getInstance()
            candidate.time = cal.time
            candidate.set(java.util.Calendar.HOUR_OF_DAY, parts[0].toInt())
            candidate.set(java.util.Calendar.MINUTE, parts[1].toInt())
            candidate.set(java.util.Calendar.SECOND, 0)
            candidate.set(java.util.Calendar.MILLISECOND, 0)

            if (candidate.timeInMillis > now.timeInMillis) {
                return dateTimeFormat.format(candidate.time)
            }
        }
    }

    return null
}

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            E_lijekovi_2Theme(
                darkTheme = isSystemInDarkTheme(), // Eksplicitno koristimo system dark theme
                dynamicColor = false // Onemoguƒáeno da se forsiraju na≈°e custom boje
            ) {
                PocetniEkran(context = this)
            }
        }
    }
}

// Dialog za dodavanje/ureƒëivanje lijeka
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LijekDialog(
    lijek: Lijek?,
    onDismiss: () -> Unit,
    onSave: (Lijek) -> Unit
) {
    var naziv by remember { mutableStateOf(lijek?.naziv ?: "") }
    var doza by remember { mutableStateOf(lijek?.doza ?: "") }
    var jutro by remember { mutableStateOf(lijek?.jutro ?: false) }
    var popodne by remember { mutableStateOf(lijek?.popodne ?: false) }
    var vecer by remember { mutableStateOf(lijek?.vecer ?: false) }
    var pakiranje by remember { mutableStateOf(lijek?.pakiranje?.toString() ?: "30") }
    var trenutnoStanje by remember { mutableStateOf(lijek?.trenutnoStanje?.toString() ?: "30") }
    var cijena by remember { mutableStateOf(lijek?.cijena ?: "") }

    var showIntervalDialog by remember { mutableStateOf(false) }

    // KARTICA: Uredi lijek / Dodaj lijek
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(if (lijek == null) "Dodaj lijek" else "Uredi lijek") },
        text = {
            Column(
                verticalArrangement = Arrangement.spacedBy(8.dp),
                modifier = Modifier.verticalScroll(rememberScrollState())
            ) {
                OutlinedTextField(
                    value = naziv,
                    onValueChange = { naziv = it },
                    label = { Text("Naziv lijeka") },
                    modifier = Modifier.fillMaxWidth()
                )

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    OutlinedTextField(
                        value = pakiranje,
                        onValueChange = { pakiranje = it },
                        label = { Text("Pak.") },
                        placeholder = { Text("30") },
                        singleLine = true,
                        modifier = Modifier.weight(1f)
                    )

                    OutlinedTextField(
                        value = doza,
                        onValueChange = { doza = it },
                        label = { Text("Doza") },
                        singleLine = true,
                        modifier = Modifier.weight(1f)
                    )

                    OutlinedTextField(
                        value = trenutnoStanje,
                        onValueChange = { trenutnoStanje = it },
                        label = { Text("Stanje") },
                        placeholder = { Text("30") },
                        modifier = Modifier.weight(1f)
                    )
                }
                OutlinedTextField(
                    value = cijena,
                    onValueChange = { cijena = it },
                    label = { Text("Cijena (opcionalno)") },
                    singleLine = true,
                    modifier = Modifier.fillMaxWidth()
                )

                Text("Vrijeme uzimanja:", fontWeight = FontWeight.Medium)

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    // Toggle kocka za jutro
                    Card(
                        onClick = { jutro = !jutro },
                        modifier = Modifier.weight(1f),
                        colors = CardDefaults.cardColors(
                            containerColor = if (jutro) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant,
                            contentColor = if (jutro) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant
                        ),
                        elevation = CardDefaults.cardElevation(
                            defaultElevation = if (jutro) 6.dp else 2.dp
                        )
                    ) {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(12.dp),
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.spacedBy(4.dp)
                        ) {
                            Text("üåû", fontSize = 24.sp)
                            Text("Jutro", fontSize = 12.sp, fontWeight = FontWeight.Medium)
                        }
                    }

                    // Toggle kocka za podne
                    Card(
                        onClick = { popodne = !popodne },
                        modifier = Modifier.weight(1f),
                        colors = CardDefaults.cardColors(
                            containerColor = if (popodne) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant,
                            contentColor = if (popodne) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant
                        ),
                        elevation = CardDefaults.cardElevation(
                            defaultElevation = if (popodne) 6.dp else 2.dp
                        )
                    ) {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(12.dp),
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.spacedBy(4.dp)
                        ) {
                            Text("‚òÄÔ∏è", fontSize = 24.sp)
                            Text("Podne", fontSize = 12.sp, fontWeight = FontWeight.Medium)
                        }
                    }

                    // Toggle kocka za veƒçer (KARTICA VEƒåER)
                    Card(
                        onClick = { vecer = !vecer },
                        modifier = Modifier.weight(1f),
                        colors = CardDefaults.cardColors(
                            containerColor = if (vecer) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant,
                            contentColor = if (vecer) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant
                        ),
                        elevation = CardDefaults.cardElevation(
                            defaultElevation = if (vecer) 6.dp else 2.dp
                        )
                    ) {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(12.dp),
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.spacedBy(4.dp)
                        ) {
                            Text("üåô", fontSize = 24.sp)
                            Text("Veƒçer", fontSize = 12.sp, fontWeight = FontWeight.Medium)
                        }
                    }
                }

                // Jednostavan gumb za intervalnu terapiju
                if (lijek != null) {
                    Spacer(modifier = Modifier.height(16.dp))

                    Button(
                        onClick = { showIntervalDialog = true },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.secondary
                        )
                    ) {
                        Icon(Icons.Default.Schedule, contentDescription = null)
                        Spacer(modifier = Modifier.width(8.dp))
                        Text("‚è∞ Postavi intervalno uzimanje")
                    }

                    // Prikaz trenutne intervalne terapije
                    if (lijek.tipUzimanja == TipUzimanja.INTERVALNO && lijek.intervalnoUzimanje != null) {
                        Spacer(modifier = Modifier.height(8.dp))
                        Card(
                            modifier = Modifier.fillMaxWidth(),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.surfaceVariant,
                                contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                            ),
                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                        ) {
                            Column(
                                modifier = Modifier.padding(16.dp)
                            ) {
                                Text(
                                    "‚è∞ Aktivna intervalna terapija:",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Bold,
                                    color = MaterialTheme.colorScheme.secondary
                                )
                                val interval = lijek.intervalnoUzimanje!!
                                Text("üìä ${interval.ukupnoUzimanja} kom, svakih ${interval.intervalSati}h")

                                val preostalo = calculateRemainingDoses(interval)
                                Text("‚è≥ Preostalo: $preostalo uzimanja")

                                val nextTime = calculateNextDose(interval)
                                if (nextTime != null) {
                                    Text("üïê Sljedeƒáe: $nextTime")
                                }
                            }
                        }
                    }
                }
            }
        },
        confirmButton = {
            Button(
                onClick = {
                    if (naziv.isNotBlank() && doza.isNotBlank()) {
                        val noviLijek = Lijek(
                            id = lijek?.id ?: 0,
                            naziv = naziv.trim(),
                            doza = doza.trim(),
                            napomene = lijek?.napomene ?: "",
                            jutro = jutro,
                            popodne = popodne,
                            vecer = vecer,
                            pakiranje = pakiranje.toIntOrNull() ?: 30,
                            trenutnoStanje = trenutnoStanje.toIntOrNull() ?: 30,
                            boja = lijek?.boja ?: "#4CAF50",
                            tipUzimanja = lijek?.tipUzimanja ?: TipUzimanja.STANDARDNO,
                            vrijemeJutro = lijek?.vrijemeJutro ?: "08:00",
                            vrijemePopodne = lijek?.vrijemePopodne ?: "14:00",
                            vrijemeVecer = lijek?.vrijemeVecer ?: "20:00",
                            intervalnoUzimanje = lijek?.intervalnoUzimanje,
                            sortOrderJutro = lijek?.sortOrderJutro ?: 0,
                            sortOrderPopodne = lijek?.sortOrderPopodne ?: 0,
                            sortOrderVecer = lijek?.sortOrderVecer ?: 0,
                            cijena = cijena.ifBlank { null }
                        )
                        onSave(noviLijek)
                    }
                }
            ) {
                Text("Spremi")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("Odustani")
            }
        }
    )

    // Dialog za intervalnu terapiju
    if (showIntervalDialog && lijek != null) {
        IntervalnaTerapijaDialog(
            lijek = lijek,
            onDismiss = { showIntervalDialog = false },
            onSave = { updatedLijek ->
                onSave(updatedLijek)
                showIntervalDialog = false
            }
        )
    }
}

// Novi jednostavan dialog za intervalnu terapiju
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun IntervalnaTerapijaDialog(
    lijek: Lijek,
    onDismiss: () -> Unit,
    onSave: (Lijek) -> Unit
) {
    var ukupnoKomada by remember { mutableStateOf(lijek.intervalnoUzimanje?.ukupnoUzimanja?.toString() ?: "12") }
    var intervalSati by remember { mutableStateOf(lijek.intervalnoUzimanje?.intervalSati?.toString() ?: "8") }

    // Date/time formatters
    val dateFormatter = java.text.SimpleDateFormat("dd-MM-yyyy", java.util.Locale.getDefault())
    val timeFormatter = java.text.SimpleDateFormat("HH:mm", java.util.Locale.getDefault())
    val dateTimeFormatter = java.text.SimpleDateFormat("dd-MM-yyyy HH:mm", java.util.Locale.getDefault())

    val todayCal = java.util.Calendar.getInstance()
    val initialDate = lijek.intervalnoUzimanje?.startDateTime?.takeIf { it.isNotBlank() }?.let {
        try { dateTimeFormatter.parse(it) } catch (e: Exception) { null }
    } ?: todayCal.time

    var pickedDate by remember { mutableStateOf(initialDate) }
    var showDatePicker by remember { mutableStateOf(false) }
    var showTimePicker by remember { mutableStateOf(false) }

    val prikazaniDatum = dateFormatter.format(pickedDate)
    val prikazanoVrijeme = timeFormatter.format(pickedDate)

    // KARTICA: Intervalno uzimanje (dialog)
    AlertDialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant,
                contentColor = MaterialTheme.colorScheme.onSurfaceVariant
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                Text(
                    "‚è∞ Intervalno uzimanje",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )

                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    "Postavite raspored za ${lijek.naziv}:",
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )

                Spacer(modifier = Modifier.height(8.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    OutlinedTextField(
                        value = ukupnoKomada,
                        onValueChange = { ukupnoKomada = it },
                        label = { Text("Ukupno komada") },
                        placeholder = { Text("12") },
                        leadingIcon = { Text("üìä") },
                        singleLine = true,
                        modifier = Modifier.weight(1f)
                    )

                    OutlinedTextField(
                        value = intervalSati,
                        onValueChange = { intervalSati = it },
                        label = { Text("Svakih (sati)") },
                        placeholder = { Text("8") },
                        leadingIcon = { Text("‚è∞") },
                        singleLine = true,
                        modifier = Modifier.weight(1f)
                    )
                }

                Spacer(modifier = Modifier.height(8.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    OutlinedTextField(
                        value = prikazaniDatum,
                        onValueChange = {},
                        label = { Text("Datum poƒçetka") },
                        readOnly = true,
                        modifier = Modifier
                            .weight(1f)
                            .clickable { showDatePicker = true }
                    )

                    OutlinedTextField(
                        value = prikazanoVrijeme,
                        onValueChange = {},
                        label = { Text("Vrijeme poƒçetka") },
                        readOnly = true,
                        modifier = Modifier
                            .weight(1f)
                            .clickable { showTimePicker = true }
                    )
                }

                Spacer(modifier = Modifier.height(8.dp))

                // KARTICA: Intervalno uzimanje (pregled u dialogu)
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant, // Ovdje se postavlja pozadina kartice
                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                    ),
                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                ) {
                    Column(modifier = Modifier.padding(12.dp)) {
                        Text(
                            "üìã Pregled:",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary
                        )

                        val komada = ukupnoKomada.toIntOrNull() ?: 12
                        val interval = intervalSati.toIntOrNull() ?: 8
                        val trajanjeDana = (komada * interval) / 24.0

                        Text("Poƒçetak: $prikazaniDatum $prikazanoVrijeme")
                        Text("üíä Ukupno: $komada komada")
                        Text("‚è∞ Interval: svaki $interval h")
                        Text("üìÖ Trajanje: ${String.format("%.1f", trajanjeDana)} dana")

                        Spacer(modifier = Modifier.height(8.dp))

                        // Prika≈æi sljedeƒáih nekoliko termina iz startnog vremena
                        val limit = minOf(komada, 12)
                        val upcoming = remember(pickedDate, interval) {
                            val list = mutableListOf<String>()
                            val cal = java.util.Calendar.getInstance()
                            cal.time = pickedDate
                            val formatter = java.text.SimpleDateFormat("dd-MM-yyyy HH:mm", java.util.Locale.getDefault())
                            for (i in 0 until limit) {
                                list.add(formatter.format(cal.time))
                                cal.add(java.util.Calendar.HOUR_OF_DAY, interval)
                            }
                            list
                        }

                        Text("üìÜ Nadolazeƒái termini:")
                        Column {
                            upcoming.forEach { dt ->
                                Text("‚Ä¢ $dt", style = MaterialTheme.typography.bodySmall)
                            }
                        }
                    }
                }
                // === KRAJ KARTICE ZA PREGLED INTERVALNE TERAPIJE U DIALOGU ===

                Spacer(modifier = Modifier.height(12.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.End
                ) {
                    TextButton(onClick = onDismiss) { Text("Odustani") }
                    Spacer(modifier = Modifier.width(8.dp))
                    Button(onClick = {
                        val ukupno = ukupnoKomada.toIntOrNull() ?: 12
                        val interval = intervalSati.toIntOrNull() ?: 8
                        val trajanje = (ukupno * interval / 24.0).toInt().coerceAtLeast(1)
                        val startDateTime = dateTimeFormatter.format(pickedDate)

                        val novaIntervalnaTerapija = IntervalnoUzimanje(
                            intervalSati = interval,
                            startDateTime = startDateTime,
                            trajanjeDana = trajanje,
                            complianceHistory = emptyList(),
                            ukupnoUzimanja = ukupno
                        )

                        val updatedLijek = lijek.copy(
                            tipUzimanja = TipUzimanja.INTERVALNO,
                            intervalnoUzimanje = novaIntervalnaTerapija,
                            jutro = false,
                            popodne = false,
                            vecer = false
                        )

                        onSave(updatedLijek)
                    }) {
                        Text("Pokreni terapiju")
                    }
                }
            }
        }
    }

    // DatePicker dialog implemented via AndroidView inside AlertDialog (ali izvan Card-a!)
    if (showDatePicker) {
        AlertDialog(
            onDismissRequest = { showDatePicker = false },
            confirmButton = {
                TextButton(onClick = { showDatePicker = false }) { Text("Odaberi") }
            },
            dismissButton = {
                TextButton(onClick = { showDatePicker = false }) { Text("Odustani") }
            },
            text = {
                val cal = java.util.Calendar.getInstance()
                cal.time = pickedDate
                AndroidView(
                    factory = { ctx ->
                        android.widget.DatePicker(ctx).apply {
                            init(
                                cal.get(java.util.Calendar.YEAR),
                                cal.get(java.util.Calendar.MONTH),
                                cal.get(java.util.Calendar.DAY_OF_MONTH)
                            ) { _, year, month, dayOfMonth ->
                                val newCal = java.util.Calendar.getInstance()
                                newCal.time = pickedDate
                                newCal.set(year, month, dayOfMonth)
                                pickedDate = newCal.time
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        )
    }
    // TimePicker dialog via AndroidView (izvan Card-a!)
    if (showTimePicker) {
        AlertDialog(
            onDismissRequest = { showTimePicker = false },
            confirmButton = {
                TextButton(onClick = { showTimePicker = false }) { Text("Odaberi") }
            },
            dismissButton = {
                TextButton(onClick = { showTimePicker = false }) { Text("Odustani") }
            },
            text = {
                val cal = java.util.Calendar.getInstance()
                cal.time = pickedDate
                AndroidView(
                    factory = { ctx ->
                        android.widget.TimePicker(ctx).apply {
                            setIs24HourView(true)
                            try {
                                hour = cal.get(java.util.Calendar.HOUR_OF_DAY)
                                minute = cal.get(java.util.Calendar.MINUTE)
                            } catch (_: Throwable) { }
                            setOnTimeChangedListener { _, hourOfDay, minute ->
                                val newCal = java.util.Calendar.getInstance()
                                newCal.time = pickedDate
                                newCal.set(java.util.Calendar.HOUR_OF_DAY, hourOfDay)
                                newCal.set(java.util.Calendar.MINUTE, minute)
                                pickedDate = newCal.time
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        )
    }
}

@Composable
fun StatisticsScreen(
    lijekovi: List<Lijek>,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(rememberScrollState())
    ) {
        Text(
            "Statistike i compliance",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 2.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)
                )
                .clip(RoundedCornerShape(12.dp)),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    "üìä Osnovne statistike",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text("Ukupno lijekova: ${lijekovi.size}")
                Text("Jutarnji lijekovi: ${lijekovi.count { it.jutro }}")
                Text("Popodnevni lijekovi: ${lijekovi.count { it.popodne }}")
                Text("Veƒçernji lijekovi: ${lijekovi.count { it.vecer }}")
                Text("Intervalni lijekovi: ${lijekovi.count { it.tipUzimanja == TipUzimanja.INTERVALNO }}")
            }
        }
    }
}

@Composable
fun SettingsScreen(
    onExportImport: () -> Unit,
    onTestImport: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            "Postavke",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        Button(
            onClick = onExportImport,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Upravljanje podacima")
        }

        Button(
            onClick = onTestImport,
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                containerColor = MaterialTheme.colorScheme.secondary
            )
        ) {
            Text("üîç Test Import funkcionalnosti")
        }

        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 1.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)
                )
                .clip(RoundedCornerShape(12.dp)),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    "‚ÑπÔ∏è Pomoƒá za Import",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text(
                    "‚Ä¢ Datoteka mora biti .json format\n" +
                    "‚Ä¢ JSON mora biti array [ ... ]\n" +
                    "‚Ä¢ Struktura mora odgovarati Lijek klasi\n" +
                    "‚Ä¢ Koristite 'Test Import' za provjeru",
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }
    }
}

@Composable
fun AboutScreen(modifier: Modifier = Modifier) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            "O aplikaciji",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 2.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)
                )
                .clip(RoundedCornerShape(12.dp)),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    "e-LijekoviHR",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text("Verzija: 1.0")
                Text("Hrvatska aplikacija za praƒáenje lijekova")
                Spacer(modifier = Modifier.height(8.dp))
                Text("Znaƒçajke:")
                Text("‚Ä¢ Praƒáenje standardnih lijekova")
                Text("‚Ä¢ Napredni intervalni doziranje")
                Text("‚Ä¢ Compliance statistike")
                Text("‚Ä¢ Export/Import podataka")
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PocetniEkran(context: Context? = null) {
    val lijekovi = remember { mutableStateListOf<Lijek>() }
    var idCounter by rememberSaveable { mutableIntStateOf(0) }
    var editLijek by remember { mutableStateOf<Lijek?>(null) }
    var showAddLijek by remember { mutableStateOf(false) }
    var showExportImportDialog by remember { mutableStateOf(false) }
    var showMessage by remember { mutableStateOf<String?>(null) }
    var currentScreen by remember { mutableStateOf("home") }
    var recentlyDeletedLijek by remember { mutableStateOf<Lijek?>(null) }
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }

    val saveData = {
        context?.let { ctx ->
            LijekoviDataManager.saveToLocalStorage(ctx, lijekovi)
        }
    }

    // onReorder function implementation moved inside PocetniEkran
    val onReorder: (DobaDana, Int, Int) -> Unit = { grupa, fromId, toId ->
        val index1 = lijekovi.indexOfFirst { it.id == fromId }
        val index2 = lijekovi.indexOfFirst { it.id == toId }

        if (index1 != -1 && index2 != -1) {
            val lijek1 = lijekovi[index1]
            val lijek2 = lijekovi[index2]

            when (grupa) {
                DobaDana.JUTRO -> {
                    lijekovi[index1] = lijek1.copy(sortOrderJutro = lijek2.sortOrderJutro)
                    lijekovi[index2] = lijek2.copy(sortOrderJutro = lijek1.sortOrderJutro)
                }
                DobaDana.POPODNE -> {
                    lijekovi[index1] = lijek1.copy(sortOrderPopodne = lijek2.sortOrderPopodne)
                    lijekovi[index2] = lijek2.copy(sortOrderPopodne = lijek1.sortOrderPopodne)
                }
                DobaDana.VECER -> {
                    lijekovi[index1] = lijek1.copy(sortOrderVecer = lijek2.sortOrderVecer)
                    lijekovi[index2] = lijek2.copy(sortOrderVecer = lijek1.sortOrderVecer)
                }
            }
            saveData()
        }
    }

    // Enhanced delete with undo functionality
    val handleDelete: (Lijek) -> Unit = { lijek ->
        recentlyDeletedLijek = lijek
        val index = lijekovi.indexOfFirst { it.id == lijek.id }
        if (index != -1) {
            lijekovi.removeAt(index)
            saveData()

            scope.launch {
                val result = snackbarHostState.showSnackbar(
                    message = "Lijek '${lijek.naziv}' je obrisan",
                    actionLabel = "Poni≈°ti",
                    duration = SnackbarDuration.Long
                )

                if (result == SnackbarResult.ActionPerformed) {
                    // Restore deleted medicine at the same position
                    recentlyDeletedLijek?.let { deletedLijek ->
                        val restoreIndex = if (index <= lijekovi.size) index else lijekovi.size
                        lijekovi.add(restoreIndex, deletedLijek)
                        saveData()
                        snackbarHostState.showSnackbar(
                            message = "Lijek '${deletedLijek.naziv}' je vraƒáen",
                            duration = SnackbarDuration.Short
                        )
                    }
                }
                recentlyDeletedLijek = null
            }
        }
    }

    // Enhanced add with highlight animation
    val handleAddLijek: (Lijek) -> Unit = { newLijek ->
        val lijekWithId = newLijek.copy(id = idCounter++)
        lijekovi.add(lijekWithId)
        saveData()
        showAddLijek = false

        scope.launch {
            snackbarHostState.showSnackbar(
                message = "Terapija '${newLijek.naziv}' dodana",
                actionLabel = "Uredi",
                duration = SnackbarDuration.Short
            ).also { result ->
                if (result == SnackbarResult.ActionPerformed) {
                    editLijek = lijekWithId
                }
            }

            // Clear highlight after animation
            kotlinx.coroutines.delay(1000)
        }
    }

    // Enhanced refill with snackbar feedback
    val handleRefill: (Lijek) -> Unit = { lijek ->
        val index = lijekovi.indexOfFirst { it.id == lijek.id }
        if (index != -1) {
            val updatedLijek = lijekovi[index].copy(
                trenutnoStanje = lijekovi[index].trenutnoStanje + lijekovi[index].pakiranje
            )
            lijekovi[index] = updatedLijek
            saveData()

            scope.launch {
                snackbarHostState.showSnackbar(
                    message = "Dodano ${lijek.pakiranje} kom za '${lijek.naziv}'",
                    duration = SnackbarDuration.Short
                )
            }
        }
    }

    LaunchedEffect(Unit) {
        context?.let { ctx ->
            val loadedLijekovi = LijekoviDataManager.loadFromLocalStorage(ctx)
            if (loadedLijekovi != null && loadedLijekovi.isNotEmpty()) {
                lijekovi.clear()
                lijekovi.addAll(loadedLijekovi)
                idCounter = (loadedLijekovi.maxOfOrNull { it.id } ?: -1) + 1
            }
        }
    }

    val exportLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.CreateDocument("application/json")
    ) { uri ->
        uri?.let {
            context?.let { ctx ->
                val success = LijekoviDataManager.saveToFile(ctx, it, lijekovi)
                showMessage = if (success) "Podaci uspje≈°no eksportirani!" else "Gre≈°ka pri exportu!"
            }
        }
    }

    val importLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.OpenDocument()
    ) { uri ->
        uri?.let {
            context?.let { ctx ->
                try {
                    val importedLijekovi = LijekoviDataManager.loadFromFile(ctx, it)
                    if (importedLijekovi != null) {
                        lijekovi.clear()
                        lijekovi.addAll(importedLijekovi)
                        idCounter = (importedLijekovi.maxOfOrNull { lijek -> lijek.id } ?: -1) + 1
                        saveData()
                        currentScreen = "home"
                        showMessage = "‚úÖ Podaci uspje≈°no importirani!\n\nUƒçitano ${importedLijekovi.size} lijekova."
                    } else {
                        showMessage = """
                            ‚ùå Gre≈°ka pri importu podataka!
                            
                            Moguƒái uzroci:
                            ‚Ä¢ Datoteka nije valjani JSON format
                            ‚Ä¢ JSON ne odgovara strukturi aplikacije  
                            ‚Ä¢ Datoteka je o≈°teƒáena ili prazna
                            ‚Ä¢ Nema dozvolu za ƒçitanje datoteke
                            
                            üí° Savjet: Poku≈°ajte exportirati podatke iz aplikacije pa ih importirati nazad da testirate format.
                            
                            üîç Za detaljne informacije provjerite Logcat (filtriraj: LijekoviDataManager)
                        """.trimIndent()
                    }
                } catch (e: Exception) {
                    showMessage = """
                        ‚ùå Neoƒçekivana gre≈°ka pri importu!
                        
                        Gre≈°ka: ${e.message ?: "Nepoznata gre≈°ka"}
                        
                        üí° Provjerite:
                        ‚Ä¢ Je li datoteka ispravno eksportirana iz aplikacije
                        ‚Ä¢ Imate li dozvolu za ƒçitanje datoteke
                        ‚Ä¢ Nije li datoteka o≈°teƒáena
                    """.trimIndent()
                }
            }
        }
    }

    showMessage?.let { message ->
        AlertDialog(
            onDismissRequest = { showMessage = null },
            title = { Text("Obavijest") },
            text = { Text(message) },
            confirmButton = {
                TextButton(onClick = { showMessage = null }) {
                    Text("U redu")
                }
            }
        )
    }

    if (showExportImportDialog) {
        AlertDialog(
            onDismissRequest = { showExportImportDialog = false },
            title = { Text("Upravljanje podacima") },
            text = {
                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    Text("Odaberite akciju:")
                }
            },
            confirmButton = {
                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    Button(
                        onClick = {
                            showExportImportDialog = false
                            exportLauncher.launch("lijekovi_backup.json")
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Exportaj podatke")
                    }
                    Button(
                        onClick = {
                            showExportImportDialog = false
                            importLauncher.launch(arrayOf("application/json"))
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Importaj podatke")
                    }
                }
            },
            dismissButton = {
                TextButton(onClick = { showExportImportDialog = false }) {
                Text("Odustani")
            }
        })
    }

    ModalNavigationDrawer(
        drawerState = drawerState,
        drawerContent = {
            ModalDrawerSheet {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                ) {
                    Text(
                        text = "e-LijekoviHR",
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.padding(vertical = 16.dp)
                    )

                    Divider(modifier = Modifier.padding(bottom = 8.dp))

                    NavigationDrawerItem(
                        icon = { Icon(Icons.Default.Home, contentDescription = "Poƒçetna") },
                        label = { Text("Poƒçetna") },
                        selected = currentScreen == "home",
                        onClick = {
                            currentScreen = "home"
                            scope.launch { drawerState.close() }
                        },
                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)
                    )

                    NavigationDrawerItem(
                        icon = { Icon(Icons.Default.Analytics, contentDescription = "Statistike") },
                        label = { Text("Statistike") },
                        selected = currentScreen == "statistics",
                        onClick = {
                            currentScreen = "statistics"
                            scope.launch { drawerState.close() }
                        },
                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)
                    )

                    NavigationDrawerItem(
                        icon = { Icon(Icons.Default.Settings, contentDescription = "Postavke") },
                        label = { Text("Postavke") },
                        selected = currentScreen == "settings",
                        onClick = {
                            currentScreen = "settings"
                            scope.launch { drawerState.close() }
                        },
                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)
                    )

                    NavigationDrawerItem(
                        icon = { Icon(Icons.Default.Info, contentDescription = "O aplikaciji") },
                        label = { Text("O aplikaciji") },
                        selected = currentScreen == "about",
                        onClick = {
                            currentScreen = "about"
                            scope.launch { drawerState.close() }
                        },
                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)
                    )
                }
            }
        }
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            when (currentScreen) {
                                "home" -> "Moji lijekovi"
                                "statistics" -> "Statistike"
                                "settings" -> "Postavke"
                                "about" -> "O aplikaciji"
                                else -> "e-LijekoviHR"
                            }
                        )
                    },
                    navigationIcon = {
                        IconButton(
                            onClick = {
                                scope.launch { drawerState.open() }
                            }
                        ) {
                            Icon(Icons.Default.Menu, contentDescription = "Menu")
                        }
                    }
                )
            },
            floatingActionButton = {
                if (currentScreen == "home") {
                    AnimatedFAB(
                        isExpanded = showAddLijek,
                        onClick = { showAddLijek = true }
                    )
                }
            },
            snackbarHost = {
                SnackbarHost(hostState = snackbarHostState)
            }
        ) { paddingValues ->
            when (currentScreen) {
                "home" -> {
                    EnhancedHomeScreen(
                        lijekovi = lijekovi,
                        onEditLijek = { editLijek = it },
                        onDeleteLijek = handleDelete,
                        onRefillLijek = handleRefill,
                        onReorder = onReorder,
                        modifier = Modifier.padding(paddingValues)
                    )
                }
                "statistics" -> {
                    StatisticsScreen(
                        lijekovi = lijekovi,
                        modifier = Modifier.padding(paddingValues)
                    )
                }
                "settings" -> {
                    SettingsScreen(
                        onExportImport = { showExportImportDialog = true },
                        onTestImport = {
                            // Test import funkcionalnosti
                            context?.let { ctx ->
                                val testUri = android.net.Uri.parse("android.resource://${ctx.packageName}/raw/test_lijekovi.json")
                                try {
                                    val importedLijekovi = LijekoviDataManager.loadFromFile(ctx, testUri)
                                    if (importedLijekovi != null) {
                                        lijekovi.clear()
                                        lijekovi.addAll(importedLijekovi)
                                        idCounter = (importedLijekovi.maxOfOrNull { lijek -> lijek.id } ?: -1) + 1
                                        saveData()
                                        showMessage = "‚úÖ Test podaci uspje≈°no importirani!\n\nUƒçitano ${importedLijekovi.size} lijekova."
                                    } else {
                                        showMessage = "‚ùå Gre≈°ka pri uƒçitavanju test podataka!"
                                    }
                                } catch (e: Exception) {
                                    showMessage = "‚ùå Neoƒçekivana gre≈°ka: ${e.message}"
                                }
                            }
                        },
                        modifier = Modifier.padding(paddingValues)
                    )
                }
                "about" -> {
                    AboutScreen(modifier = Modifier.padding(paddingValues))
                }
            }
        }
    }

    if (showAddLijek) {
        LijekDialog(
            lijek = null,
            onDismiss = { showAddLijek = false },
            onSave = { newLijek ->
                val duplicate = lijekovi.any {
                    it.naziv.lowercase() == newLijek.naziv.lowercase()
                }

                if (duplicate) {
                    scope.launch {
                        snackbarHostState.showSnackbar(
                            message = "Lijek '${newLijek.naziv}' veƒá postoji!",
                            duration = SnackbarDuration.Short
                        )
                    }
                    return@LijekDialog
                }

                handleAddLijek(newLijek)
            }
        )
    }

    editLijek?.let { lijek ->
        LijekDialog(
            lijek = lijek,
            onDismiss = { editLijek = null },
            onSave = { updatedLijek ->
                val duplicate = lijekovi.any {
                    it.id != lijek.id && it.naziv.lowercase() == updatedLijek.naziv.lowercase()
                }

                if (duplicate) {
                    scope.launch {
                        snackbarHostState.showSnackbar(
                            message = "Lijek '${updatedLijek.naziv}' veƒá postoji!",
                            duration = SnackbarDuration.Short
                        )
                    }
                    return@LijekDialog
                }

                val index = lijekovi.indexOfFirst { it.id == lijek.id }
                if (index != -1) {
                    lijekovi[index] = updatedLijek
                    saveData()

                    scope.launch {
                        snackbarHostState.showSnackbar(
                            message = "Lijek '${updatedLijek.naziv}' a≈æuriran",
                            duration = SnackbarDuration.Short
                        )
                    }
                }
                editLijek = null
            }
        )
    }
}

// Enhanced HomeScreen with new animated components
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EnhancedHomeScreen(
    lijekovi: List<Lijek>,
    onEditLijek: (Lijek) -> Unit,
    onDeleteLijek: (Lijek) -> Unit,
    onRefillLijek: (Lijek) -> Unit,
    onReorder: (DobaDana, Int, Int) -> Unit,
    modifier: Modifier = Modifier
) {
    var searchQuery by remember { mutableStateOf("") }
    val kategorije = listOf("Svi", "Jutro", "Podne", "Veƒçer", "Intervalno")
    var selectedKategorija by remember { mutableStateOf("Svi") }

    // Dodano za confirm dialog
    var showDeleteDialog by remember { mutableStateOf(false) }
    var lijekZaBrisanje by remember { mutableStateOf<Lijek?>(null) }
    var dismissStateZaBrisanje by remember { mutableStateOf<DismissState?>(null) }
    var resetDismissStateFlag by remember { mutableStateOf(false) }

    val filtriraniLijekovi by remember(lijekovi, searchQuery, selectedKategorija) {
        derivedStateOf {
            lijekovi.filter { lijek ->
                (searchQuery.isBlank() || lijek.naziv.contains(searchQuery, ignoreCase = true)) &&
                (selectedKategorija == "Svi" ||
                    (selectedKategorija == "Jutro" && lijek.jutro) ||
                    (selectedKategorija == "Podne" && lijek.popodne) ||
                    (selectedKategorija == "Veƒçer" && lijek.vecer) ||
                    (selectedKategorija == "Intervalno" && lijek.tipUzimanja == TipUzimanja.INTERVALNO))
            }
        }
    }

    Column(modifier = modifier.fillMaxSize().padding(8.dp)) {
        OutlinedTextField(
            value = searchQuery,
            onValueChange = { searchQuery = it },
            label = { Text("Pretra≈æi lijekove") },
            leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp)
        )
        LazyRow(
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            modifier = Modifier.padding(bottom = 8.dp)
        ) {
            items(kategorije) { kategorija ->
                FilterChip(
                    selected = selectedKategorija == kategorija,
                    onClick = { selectedKategorija = kategorija },
                    label = { Text(kategorija) }
                )
            }
        }
        if (filtriraniLijekovi.isEmpty()) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Text("Nema lijekova za prikaz", style = MaterialTheme.typography.bodyLarge)
            }
        } else {
            LazyColumn(
                verticalArrangement = Arrangement.spacedBy(0.dp), // Uklonjen razmak, koristimo Divider
                modifier = Modifier.fillMaxSize()
            ) {
                items(filtriraniLijekovi, key = { it.id }) { lijek ->
                    val dismissState = rememberDismissState(
                        confirmValueChange = { value ->
                            if ((value == DismissValue.DismissedToStart || value == DismissValue.DismissedToEnd) && !showDeleteDialog) {
                                lijekZaBrisanje = lijek
                                showDeleteDialog = true
                            }
                            false
                        }
                    )
                    if ((dismissState.currentValue == DismissValue.DismissedToStart || dismissState.currentValue == DismissValue.DismissedToEnd) && !showDeleteDialog) {
                        dismissStateZaBrisanje = dismissState
                    }
                    Column {
                        SwipeToDismiss(
                            state = dismissState,
                            directions = setOf(DismissDirection.EndToStart, DismissDirection.StartToEnd),
                            background = {
                                val color = when (dismissState.dismissDirection) {
                                    DismissDirection.StartToEnd, DismissDirection.EndToStart -> MaterialTheme.colorScheme.error
                                    null -> MaterialTheme.colorScheme.surface
                                }
                                Box(
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .background(color)
                                        .padding(horizontal = 20.dp),
                                    contentAlignment = Alignment.CenterStart
                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Delete,
                                        contentDescription = "Obri≈°i lijek",
                                        tint = MaterialTheme.colorScheme.onError
                                    )
                                }
                            },
                            dismissContent = {
                                Row(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(72.dp)
                                        .padding(horizontal = 12.dp)
                                        .background(
                                            color = if (lijek.trenutnoStanje < 7) Color(0xFFFFF59D) /* ≈æuta */
                                            else MaterialTheme.colorScheme.surface,
                                            shape = RoundedCornerShape(12.dp)
                                        )
                                        .clickable { onEditLijek(lijek) },
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    // Slika ili placeholder
                                    Box(
                                        modifier = Modifier
                                            .size(44.dp)
                                            .background(MaterialTheme.colorScheme.surfaceVariant, RoundedCornerShape(8.dp)),
                                        contentAlignment = Alignment.Center
                                    ) {
                                        Text(lijek.naziv.take(2).uppercase(), style = MaterialTheme.typography.titleMedium)
                                    }
                                    Spacer(modifier = Modifier.width(12.dp))
                                    Column(
                                        modifier = Modifier.weight(1f)
                                    ) {
                                        Row(verticalAlignment = Alignment.CenterVertically) {
                                            Text(lijek.naziv, style = MaterialTheme.typography.titleMedium, maxLines = 1)
                                            if (lijek.tipUzimanja == TipUzimanja.INTERVALNO && lijek.intervalnoUzimanje != null) {
                                                Spacer(modifier = Modifier.width(6.dp))
                                                Icon(
                                                    imageVector = Icons.Default.Schedule,
                                                    contentDescription = "Intervalni lijek",
                                                    tint = MaterialTheme.colorScheme.secondary,
                                                    modifier = Modifier.size(18.dp)
                                                )
                                            }
                                        }
                                        Text("${lijek.pakiranje}/${lijek.trenutnoStanje}", style = MaterialTheme.typography.bodyMedium, maxLines = 1)
                                        if (lijek.tipUzimanja == TipUzimanja.INTERVALNO && lijek.intervalnoUzimanje != null) {
                                            val nextTime = calculateNextDose(lijek.intervalnoUzimanje)
                                            if (nextTime != null) {
                                                Text(
                                                    text = "Sljedeƒáe: $nextTime",
                                                    style = MaterialTheme.typography.bodySmall,
                                                    color = MaterialTheme.colorScheme.secondary
                                                )
                                            }
                                        }
                                    }
                                    if (!lijek.cijena.isNullOrBlank()) {
                                        Spacer(modifier = Modifier.width(8.dp))
                                        Text(
                                            text = lijek.cijena,
                                            style = MaterialTheme.typography.titleMedium,
                                            color = MaterialTheme.colorScheme.onSurface,
                                            maxLines = 1
                                        )
                                    }
                                    Spacer(modifier = Modifier.width(8.dp))

                                    Icon(
                                        imageVector = Icons.Default.KeyboardArrowRight,
                                        contentDescription = "Detalji",
                                        tint = MaterialTheme.colorScheme.onSurfaceVariant
                                    )
                                }
                            }
                        )
                        Divider(
                            color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f),
                            thickness = 1.dp,
                            modifier = Modifier.padding(start = 16.dp, end = 16.dp)
                        )
                    }
                }
            }
        }
    }

    // Side-effect za resetiranje dismissState
    if (resetDismissStateFlag && dismissStateZaBrisanje != null) {
        LaunchedEffect(dismissStateZaBrisanje) {
            dismissStateZaBrisanje?.reset()
            resetDismissStateFlag = false
            dismissStateZaBrisanje = null
        }
    }

    // Confirm dialog
    if (showDeleteDialog && lijekZaBrisanje != null) {
        AlertDialog(
            onDismissRequest = {
                showDeleteDialog = false
                lijekZaBrisanje = null
                resetDismissStateFlag = true
            },
            title = { Text("Potvrda brisanja") },
            text = { Text("Jeste li sigurni da ≈æelite obrisati lijek: ${lijekZaBrisanje?.naziv}?") },
            confirmButton = {
                TextButton(onClick = {
                    lijekZaBrisanje?.let { onDeleteLijek(it) }
                    showDeleteDialog = false
                    lijekZaBrisanje = null
                    dismissStateZaBrisanje = null
                    resetDismissStateFlag = true // Dodano za sigurno resetiranje SwipeToDismiss
                }) {
                    Text("Obri≈°i")
                }
            },
            dismissButton = {
                TextButton(onClick = {
                    showDeleteDialog = false
                    lijekZaBrisanje = null
                    resetDismissStateFlag = true
                }) {
                    Text("Odustani")
                }
            }
        )
    }
}

// Missing function: AnimatedFAB
@Composable
fun AnimatedFAB(
    isExpanded: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    val rotation by animateFloatAsState(
        targetValue = if (isExpanded) 45f else 0f,
        animationSpec = spring(
            dampingRatio = Spring.DampingRatioMediumBouncy,
            stiffness = Spring.StiffnessMedium
        ),
        label = "fab_rotation"
    )

    FloatingActionButton(
        onClick = onClick,
        modifier = modifier,
        containerColor = MaterialTheme.colorScheme.primary
    ) {
        Icon(
            imageVector = Icons.Default.Add,
            contentDescription = "Dodaj lijek",
            modifier = Modifier.graphicsLayer(rotationZ = rotation)
        )
    }
}
