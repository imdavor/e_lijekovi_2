package com.example.e_lijekovi_2

import android.app.NotificationChannel
import android.app.NotificationManager
import android.os.Build
import android.os.Bundle
import android.content.Context
import android.content.pm.PackageManager
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.clickable
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.Spring
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.compose.ui.platform.LocalContext
import com.example.e_lijekovi_2.ui.theme.E_lijekovi_2Theme
import com.example.e_lijekovi_2.ui.components.LijekCard
import kotlinx.coroutines.launch
import android.content.Intent
import android.net.Uri
import android.provider.Settings
import androidx.core.app.NotificationManagerCompat

// Helper functions for interval therapy calculations
private fun calculateRemainingDoses(interval: IntervalnoUzimanje): Int {
    val takenCount = interval.complianceHistory.size
    return maxOf(0, interval.ukupnoUzimanja - takenCount)
}

private fun calculateNextDose(interval: IntervalnoUzimanje): String? {
    // Scan scheduled times generated by IntervalnoUzimanje for today and following days
    val now = java.util.Calendar.getInstance()
    val dateFormat = java.text.SimpleDateFormat("dd-MM-yyyy", java.util.Locale.getDefault())
    val dateTimeFormat = java.text.SimpleDateFormat("dd-MM-yyyy HH:mm", java.util.Locale.getDefault())

    // Check up to the therapy duration days starting from today
    for (dayOffset in 0 until interval.trajanjeDana) {
        val cal = java.util.Calendar.getInstance()
        cal.add(java.util.Calendar.DAY_OF_YEAR, dayOffset)
        val dateStr = dateFormat.format(cal.time)
        val times = interval.generirajVremenaZaDan(dateStr)

        for (t in times) {
            val parts = t.split(":")
            if (parts.size < 2) continue
            val candidate = java.util.Calendar.getInstance()
            candidate.time = cal.time
            candidate.set(java.util.Calendar.HOUR_OF_DAY, parts[0].toInt())
            candidate.set(java.util.Calendar.MINUTE, parts[1].toInt())
            candidate.set(java.util.Calendar.SECOND, 0)
            candidate.set(java.util.Calendar.MILLISECOND, 0)

            if (candidate.timeInMillis > now.timeInMillis) {
                return dateTimeFormat.format(candidate.time)
            }
        }
    }

    return null
}

class MainActivity : ComponentActivity() {
    private lateinit var requestNotificationPermissionLauncher: ActivityResultLauncher<String>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        // Register permission launcher
        requestNotificationPermissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
            // No-op here; NotificationReceiver checks permission when posting
        }

        // Create notification channel
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "Podsjetnici"
            val descriptionText = "Channel for medicine reminders"
            val importance = NotificationManager.IMPORTANCE_DEFAULT
            val channel = NotificationChannel(NotificationScheduler.CHANNEL_ID, name, importance).apply {
                description = descriptionText
            }
            val notificationManager: NotificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.createNotificationChannel(channel)
        }

        // Request POST_NOTIFICATIONS permission on Android 13+
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            val permission = android.Manifest.permission.POST_NOTIFICATIONS
            if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
                requestNotificationPermissionLauncher.launch(permission)
            }
        }

        // Schedule reminders from saved prefs
        val prefs = getSharedPreferences("e_lijekovi_prefs", MODE_PRIVATE)
        prefs.getString("reminder_jutro", null)?.let {
            NotificationScheduler.scheduleDailyReminder(this, it, "Jutro")
        }
        prefs.getString("reminder_podne", null)?.let {
            NotificationScheduler.scheduleDailyReminder(this, it, "Podne")
        }
        prefs.getString("reminder_vecer", null)?.let {
            NotificationScheduler.scheduleDailyReminder(this, it, "Večer")
        }

        setContent {
            E_lijekovi_2Theme(
                darkTheme = isSystemInDarkTheme(), // Eksplicitno koristimo system dark theme
                dynamicColor = false // Onemogućeno da se forsiraju naše custom boje
            ) {
                PocetniEkran(context = this)
            }
        }
    }
}

// Dialog za dodavanje/uređivanje lijeka
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LijekDialog(
    lijek: Lijek?,
    onDismiss: () -> Unit,
    onSave: (Lijek) -> Unit,
    onDelete: (Lijek) -> Unit
) {
    var naziv by remember { mutableStateOf(lijek?.naziv ?: "") }
    var doza by remember { mutableStateOf(lijek?.doza ?: "") }
    var jutro by remember { mutableStateOf(lijek?.jutro ?: false) }
    var popodne by remember { mutableStateOf(lijek?.popodne ?: false) }
    var vecer by remember { mutableStateOf(lijek?.vecer ?: false) }
    var pakiranje by remember { mutableStateOf(lijek?.pakiranje?.toString() ?: "30") }
    var trenutnoStanje by remember { mutableStateOf(lijek?.trenutnoStanje?.toString() ?: "30") }
    var cijena by remember { mutableStateOf(lijek?.cijena ?: "") }

    var showIntervalDialog by remember { mutableStateOf(false) }
    var showDeleteConfirm by remember { mutableStateOf(false) }

    // KARTICA: Uredi lijek / Dodaj lijek
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(if (lijek == null) "Dodaj lijek" else "Uredi lijek") },
        text = {
            Column(
                verticalArrangement = Arrangement.spacedBy(8.dp),
                modifier = Modifier.verticalScroll(rememberScrollState())
            ) {
                OutlinedTextField(
                    value = naziv,
                    onValueChange = { naziv = it },
                    label = { Text("Naziv lijeka") },
                    modifier = Modifier.fillMaxWidth()
                )

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    OutlinedTextField(
                        value = pakiranje,
                        onValueChange = { pakiranje = it },
                        label = { Text("Pak.") },
                        placeholder = { Text("30") },
                        singleLine = true,
                        modifier = Modifier.weight(1f)
                    )

                    OutlinedTextField(
                        value = doza,
                        onValueChange = { doza = it },
                        label = { Text("Doza") },
                        singleLine = true,
                        modifier = Modifier.weight(1f)
                    )

                    OutlinedTextField(
                        value = trenutnoStanje,
                        onValueChange = { trenutnoStanje = it },
                        label = { Text("Stanje") },
                        placeholder = { Text("30") },
                        modifier = Modifier.weight(1f)
                    )
                }
                OutlinedTextField(
                    value = cijena,
                    onValueChange = { cijena = it },
                    label = { Text("Cijena (opcionalno)") },
                    singleLine = true,
                    modifier = Modifier.fillMaxWidth()
                )

                Text("Vrijeme uzimanja:", fontWeight = FontWeight.Medium)

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    // Jutro
                    Card(
                        onClick = { jutro = !jutro },
                        modifier = Modifier.weight(1f),
                        colors = CardDefaults.cardColors(
                            containerColor = if (jutro) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),
                            contentColor = MaterialTheme.colorScheme.onSurface
                        ),
                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
                        shape = RoundedCornerShape(16.dp)
                    ) {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 10.dp),
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.spacedBy(2.dp)
                        ) {
                            Text("🌞", fontSize = 28.sp)
                            Text("Jutro", fontSize = 13.sp, fontWeight = FontWeight.Medium)
                            Text(
                                if (jutro) "Uključeno" else "Isključeno",
                                fontSize = 11.sp,
                                fontWeight = if (jutro) FontWeight.Bold else FontWeight.Normal,
                                color = if (jutro) MaterialTheme.colorScheme.primary else Color.Gray
                            )
                        }
                    }

                    // Podne
                    Card(
                        onClick = { popodne = !popodne },
                        modifier = Modifier.weight(1f),
                        colors = CardDefaults.cardColors(
                            containerColor = if (popodne) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),
                            contentColor = MaterialTheme.colorScheme.onSurface
                        ),
                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
                        shape = RoundedCornerShape(16.dp)
                    ) {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 10.dp),
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.spacedBy(2.dp)
                        ) {
                            Text("☀️", fontSize = 28.sp)
                            Text("Podne", fontSize = 13.sp, fontWeight = FontWeight.Medium)
                            Text(
                                if (popodne) "Uključeno" else "Isključeno",
                                fontSize = 11.sp,
                                fontWeight = if (popodne) FontWeight.Bold else FontWeight.Normal,
                                color = if (popodne) MaterialTheme.colorScheme.primary else Color.Gray
                            )
                        }
                    }

                    // Večer
                    Card(
                        onClick = { vecer = !vecer },
                        modifier = Modifier.weight(1f),
                        colors = CardDefaults.cardColors(
                            containerColor = if (vecer) MaterialTheme.colorScheme.primary.copy(alpha = 0.25f) else Color(0xFFE0E0E0),
                            contentColor = MaterialTheme.colorScheme.onSurface
                        ),
                        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
                        shape = RoundedCornerShape(16.dp)
                    ) {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 10.dp),
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.spacedBy(2.dp)
                        ) {
                            Text("🌙", fontSize = 28.sp)
                            Text("Večer", fontSize = 13.sp, fontWeight = FontWeight.Medium)
                            Text(
                                if (vecer) "Uključeno" else "Isključeno",
                                fontSize = 11.sp,
                                fontWeight = if (vecer) FontWeight.Bold else FontWeight.Normal,
                                color = if (vecer) MaterialTheme.colorScheme.primary else Color.Gray
                            )
                        }
                    }
                }

                // Jednostavan gumb za intervalnu terapiju
                if (lijek != null) {
                    Spacer(modifier = Modifier.height(16.dp))

                    Button(
                        onClick = { showIntervalDialog = true },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.secondary
                        )
                    ) {
                        Icon(Icons.Default.Schedule, contentDescription = null)
                        Spacer(modifier = Modifier.width(8.dp))
                        Text("⏰ Postavi intervalno uzimanje")
                    }

                    // Prikaz trenutne intervalne terapije
                    if (lijek.tipUzimanja == TipUzimanja.INTERVALNO && lijek.intervalnoUzimanje != null) {
                        Spacer(modifier = Modifier.height(8.dp))
                        Card(
                            modifier = Modifier.fillMaxWidth(),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.surfaceVariant,
                                contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                            ),
                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                        ) {
                            Column(
                                modifier = Modifier.padding(16.dp)
                            ) {
                                Text(
                                    "⏰ Aktivna intervalna terapija:",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Bold,
                                    color = MaterialTheme.colorScheme.secondary
                                )
                                val interval = lijek.intervalnoUzimanje
                                Text("📊 ${interval.ukupnoUzimanja} kom, svakih ${interval.intervalSati}h")

                                val preostalo = calculateRemainingDoses(interval)
                                Text("⏳ Preostalo: $preostalo uzimanja")

                                val nextTime = calculateNextDose(interval)
                                if (nextTime != null) {
                                    Text("🕐 Sljedeće: $nextTime")
                                }
                            }
                        }
                    }
                }
            }
        },
        confirmButton = {
            Button(
                onClick = {
                    if (naziv.isNotBlank() && doza.isNotBlank()) {
                        val noviLijek = Lijek(
                            id = lijek?.id ?: 0,
                            naziv = naziv.trim(),
                            doza = doza.trim(),
                            napomene = lijek?.napomene ?: "",
                            jutro = jutro,
                            popodne = popodne,
                            vecer = vecer,
                            pakiranje = pakiranje.toIntOrNull() ?: 30,
                            trenutnoStanje = trenutnoStanje.toIntOrNull() ?: 30,
                            boja = lijek?.boja ?: "#4CAF50",
                            tipUzimanja = lijek?.tipUzimanja ?: TipUzimanja.STANDARDNO,
                            vrijemeJutro = lijek?.vrijemeJutro ?: "08:00",
                            vrijemePopodne = lijek?.vrijemePopodne ?: "14:00",
                            vrijemeVecer = lijek?.vrijemeVecer ?: "20:00",
                            intervalnoUzimanje = lijek?.intervalnoUzimanje,
                            sortOrderJutro = lijek?.sortOrderJutro ?: 0,
                            sortOrderPopodne = lijek?.sortOrderPopodne ?: 0,
                            sortOrderVecer = lijek?.sortOrderVecer ?: 0,
                            cijena = cijena.trim(),
                            // Preserve existing compliance history and per-day flags so edits (npr. cijena) don't clear taken records
                            complianceHistory = lijek?.complianceHistory ?: emptyList(),
                            dozeZaDan = lijek?.dozeZaDan ?: mutableMapOf()
                        )
                        onSave(noviLijek)
                    }
                }
            ) {
                Text("Spremi")
            }
        },
        dismissButton = {
            Row {
                TextButton(onClick = onDismiss) {
                    Text("Odustani")
                }
                if (lijek != null) {
                    Spacer(modifier = Modifier.width(8.dp))
                    TextButton(onClick = { showDeleteConfirm = true }) {
                        Text("Obriši", color = Color.Red)
                    }
                }
            }
        }
    )

    // Delete confirmation dialog (shown when user taps delete)
    if (showDeleteConfirm && lijek != null) {
        AlertDialog(
            onDismissRequest = { showDeleteConfirm = false },
            title = { Text("Potvrda brisanja") },
            text = { Text("Jeste li sigurni da želite obrisati lijek '${lijek.naziv}'? Ova radnja se ne može poništiti.") },
            confirmButton = {
                TextButton(onClick = {
                    onDelete(lijek)
                    showDeleteConfirm = false
                    onDismiss()
                }) {
                    Text("Obriši", color = Color.Red)
                }
            },
            dismissButton = {
                TextButton(onClick = { showDeleteConfirm = false }) {
                    Text("Odustani")
                }
            }
        )
    }

    // Dialog za intervalnu terapiju
    if (showIntervalDialog && lijek != null) {
        IntervalnaTerapijaDialog(
            lijek = lijek,
            onDismiss = { showIntervalDialog = false },
            onSave = { updatedLijek ->
                onSave(updatedLijek)
                showIntervalDialog = false
            }
        )
    }
}

// Novi jednostavan dialog za intervalnu terapiju
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun IntervalnaTerapijaDialog(
    lijek: Lijek,
    onDismiss: () -> Unit,
    onSave: (Lijek) -> Unit
) {
    var ukupnoKomada by remember { mutableStateOf(lijek.intervalnoUzimanje?.ukupnoUzimanja?.toString() ?: "12") }
    var intervalSati by remember { mutableStateOf(lijek.intervalnoUzimanje?.intervalSati?.toString() ?: "8") }

    // Date/time formatters
    val dateFormatter = java.text.SimpleDateFormat("dd-MM-yyyy", java.util.Locale.getDefault())
    val timeFormatter = java.text.SimpleDateFormat("HH:mm", java.util.Locale.getDefault())
    val dateTimeFormatter = java.text.SimpleDateFormat("dd-MM-yyyy HH:mm", java.util.Locale.getDefault())

    val todayCal = java.util.Calendar.getInstance()
    val initialDate = lijek.intervalnoUzimanje?.startDateTime?.takeIf { it.isNotBlank() }?.let {
        try { dateTimeFormatter.parse(it) } catch (_: Exception) { null }
    } ?: todayCal.time

    var pickedDate by remember { mutableStateOf(initialDate) }
    var showDatePicker by remember { mutableStateOf(false) }
    var showTimePicker by remember { mutableStateOf(false) }

    val prikazaniDatum = dateFormatter.format(pickedDate)
    val prikazanoVrijeme = timeFormatter.format(pickedDate)

    // KARTICA: Intervalno uzimanje (dialog)
    AlertDialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant,
                contentColor = MaterialTheme.colorScheme.onSurfaceVariant
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                Text(
                    "⏰ Intervalno uzimanje",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )

                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    "Postavite raspored za ${lijek.naziv}:",
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )

                Spacer(modifier = Modifier.height(8.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    OutlinedTextField(
                        value = ukupnoKomada,
                        onValueChange = { ukupnoKomada = it },
                        label = { Text("Ukupno komada") },
                        placeholder = { Text("12") },
                        leadingIcon = { Text("📊") },
                        singleLine = true,
                        modifier = Modifier.weight(1f)
                    )

                    OutlinedTextField(
                        value = intervalSati,
                        onValueChange = { intervalSati = it },
                        label = { Text("Svakih (sati)") },
                        placeholder = { Text("8") },
                        leadingIcon = { Text("⏰") },
                        singleLine = true,
                        modifier = Modifier.weight(1f)
                    )
                }

                Spacer(modifier = Modifier.height(8.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    OutlinedTextField(
                        value = prikazaniDatum,
                        onValueChange = {},
                        label = { Text("Datum početka") },
                        readOnly = true,
                        modifier = Modifier
                            .weight(1f)
                            .clickable { showDatePicker = true }
                    )

                    OutlinedTextField(
                        value = prikazanoVrijeme,
                        onValueChange = {},
                        label = { Text("Vrijeme početka") },
                        readOnly = true,
                        modifier = Modifier
                            .weight(1f)
                            .clickable { showTimePicker = true }
                    )
                }

                Spacer(modifier = Modifier.height(8.dp))

                // KARTICA: Intervalno uzimanje (pregled u dialogu)
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant, // Ovdje se postavlja pozadina kartice
                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                    ),
                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                ) {
                    Column(modifier = Modifier.padding(12.dp)) {
                        Text(
                            "📋 Pregled:",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary
                        )

                        val komada = ukupnoKomada.toIntOrNull() ?: 12
                        val interval = intervalSati.toIntOrNull() ?: 8
                        val trajanjeDana = (komada * interval) / 24.0

                        Text("Početak: $prikazaniDatum $prikazanoVrijeme")
                        Text("💊 Ukupno: $komada komada")
                        Text("⏰ Interval: svaki $interval h")
                        Text("📅 Trajanje: ${String.format("%.1f", trajanjeDana)} dana")

                        Spacer(modifier = Modifier.height(8.dp))

                        // Prikaži samo jedan sljedeći termin unutar 24 sata, prema intervalu
                        val nextTerm = remember(pickedDate, interval) {
                            val cal = java.util.Calendar.getInstance()
                            cal.time = pickedDate
                            val now = java.util.Calendar.getInstance()
                            val formatter = java.text.SimpleDateFormat("HH:mm", java.util.Locale.getDefault())
                            var result: String? = null
                            repeat(komada) {
                                val diff = cal.timeInMillis - now.timeInMillis
                                if (diff >= 0 && diff < 24*60*60*1000) {
                                    result = formatter.format(cal.time)
                                    return@repeat
                                }
                                cal.add(java.util.Calendar.HOUR_OF_DAY, interval)
                            }
                            result
                        }
                        if (nextTerm != null) {
                            Text("📆 Sljedeći termin: $nextTerm", style = MaterialTheme.typography.bodyMedium)
                        } else {
                            Text("Nema termina unutar 24h", style = MaterialTheme.typography.bodyMedium)
                        }
                    }
                }
                // === KRAJ KARTICE ZA PREGLED INTERVALNE TERAPIJE U DIALOGU ===

                Spacer(modifier = Modifier.height(12.dp))

                // Gumbi horizontalno, vizualno poboljšani
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    TextButton(onClick = onDismiss) {
                        Text("Odustani", fontWeight = FontWeight.Medium)
                    }
                    TextButton(onClick = {
                        val updatedLijek = lijek.copy(
                            tipUzimanja = TipUzimanja.STANDARDNO,
                            intervalnoUzimanje = null
                        )
                        onSave(updatedLijek)
                        onDismiss()
                    }) {
                        Text("Isključi", fontWeight = FontWeight.Medium, color = Color.Red)
                    }
                    Button(onClick = {
                        val ukupno = ukupnoKomada.toIntOrNull() ?: 12
                        val interval = intervalSati.toIntOrNull() ?: 8
                        val trajanje = (ukupno * interval / 24.0).toInt().coerceAtLeast(1)
                        val startDateTime = dateTimeFormatter.format(pickedDate)

                        val novaIntervalnaTerapija = IntervalnoUzimanje(
                            intervalSati = interval,
                            startDateTime = startDateTime,
                            trajanjeDana = trajanje,
                            complianceHistory = emptyList(),
                            ukupnoUzimanja = ukupno
                        )

                        val updatedLijek = lijek.copy(
                            tipUzimanja = TipUzimanja.INTERVALNO,
                            intervalnoUzimanje = novaIntervalnaTerapija,
                            jutro = false,
                            popodne = false,
                            vecer = false
                        )

                        onSave(updatedLijek)
                    }, colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)) {
                        Text("Započni", fontWeight = FontWeight.Bold, color = Color.White)
                    }
                }
            }
        }
    }

    // DatePicker dialog implemented via AndroidView inside AlertDialog (ali izvan Card-a!)
    if (showDatePicker) {
        AlertDialog(
            onDismissRequest = { showDatePicker = false },
            confirmButton = {
                TextButton(onClick = { showDatePicker = false }) { Text("Odaberi") }
            },
            dismissButton = {
                TextButton(onClick = { showDatePicker = false }) { Text("Odustani") }
            },
            text = {
                val cal = java.util.Calendar.getInstance()
                cal.time = pickedDate
                AndroidView(
                    factory = { ctx ->
                        android.widget.DatePicker(ctx).apply {
                            init(
                                cal.get(java.util.Calendar.YEAR),
                                cal.get(java.util.Calendar.MONTH),
                                cal.get(java.util.Calendar.DAY_OF_MONTH)
                            ) { _, year, month, dayOfMonth ->
                                val newCal = java.util.Calendar.getInstance()
                                newCal.time = pickedDate
                                newCal.set(year, month, dayOfMonth)
                                pickedDate = newCal.time
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        )
    }
    // TimePicker dialog via AndroidView (izvan Card-a!)
    if (showTimePicker) {
        AlertDialog(
            onDismissRequest = { showTimePicker = false },
            confirmButton = {
                TextButton(onClick = { showTimePicker = false }) { Text("Odaberi") }
            },
            dismissButton = {
                TextButton(onClick = { showTimePicker = false }) { Text("Odustani") }
            },
            text = {
                val cal = java.util.Calendar.getInstance()
                cal.time = pickedDate
                AndroidView(
                    factory = { ctx ->
                        android.widget.TimePicker(ctx).apply {
                            setIs24HourView(true)
                            try {
                                hour = cal.get(java.util.Calendar.HOUR_OF_DAY)
                                minute = cal.get(java.util.Calendar.MINUTE)
                            } catch (_: Throwable) { }
                            setOnTimeChangedListener { _, hourOfDay, minute ->
                                val newCal = java.util.Calendar.getInstance()
                                newCal.time = pickedDate
                                newCal.set(java.util.Calendar.HOUR_OF_DAY, hourOfDay)
                                newCal.set(java.util.Calendar.MINUTE, minute)
                                pickedDate = newCal.time
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        )
    }
}

@Composable
fun StatisticsScreen(
    lijekovi: List<Lijek>,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(rememberScrollState())
    ) {
        Text(
            "Statistike i compliance",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 2.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)
                )
                .clip(RoundedCornerShape(12.dp)),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    "📊 Osnovne statistike",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text("Ukupno lijekova: ${lijekovi.size}")
                Text("Jutarnji lijekovi: ${lijekovi.count { it.jutro }}")
                Text("Popodnevni lijekovi: ${lijekovi.count { it.popodne }}")
                Text("Večernji lijekovi: ${lijekovi.count { it.vecer }}")
                Text("Intervalni lijekovi: ${lijekovi.count { it.tipUzimanja == TipUzimanja.INTERVALNO }}")
            }
        }

        Spacer(modifier = Modifier.height(12.dp))

        // DODANO: Sažetak o cijenama
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 2.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.06f)
                )
                .clip(RoundedCornerShape(12.dp)),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(modifier = Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
                Text("💶 Sažetak upisanih cijena", style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)

                // Parsiraj cijene: podržava zarez ili točku (CIJENA JE PO PAKIRANJU)
                val parsedPackagePrices = lijekovi.mapNotNull { l ->
                    l.cijena.replace(',', '.').toDoubleOrNull()
                }

                val packageCount = parsedPackagePrices.size
                val sumPackagePrices = parsedPackagePrices.sum()
                val avgPackagePrice = if (packageCount > 0) sumPackagePrices / packageCount else 0.0
                val minPackage = parsedPackagePrices.minOrNull() ?: 0.0
                val maxPackage = parsedPackagePrices.maxOrNull() ?: 0.0

                // Izračun per-unit cijena i ukupne vrijednosti zaliha
                val perUnitPrices = lijekovi.mapNotNull { l ->
                    val p = l.cijena.replace(',', '.').toDoubleOrNull()
                    if (p == null) return@mapNotNull null
                    val pak = if (l.pakiranje > 0) l.pakiranje.toDouble() else 1.0
                    p / pak
                }

                val sumUnitPrices = perUnitPrices.sum()
                val avgUnitPrice = if (perUnitPrices.isNotEmpty()) sumUnitPrices / perUnitPrices.size else 0.0

                // Ukupna vrijednost zaliha: tretiramo cijenu kao cijenu po pakiranju
                // vrijednost za lijek = cijena_po_pakiranju * (trenutnoStanje / pakiranje)
                val totalStockValue = lijekovi.fold(0.0) { acc, l ->
                    val p = l.cijena.replace(',', '.').toDoubleOrNull()
                    if (p == null) return@fold acc
                    val pak = if (l.pakiranje > 0) l.pakiranje.toDouble() else 1.0
                    // koliko pakovanja predstavljaju trenutnoStanje
                    val pakovanja = l.trenutnoStanje.toDouble() / pak
                    acc + p * pakovanja
                }

                fun fmt(v: Double): String {
                    val s = String.format(java.util.Locale.getDefault(), "%.2f €", v)
                    return s.replace('.', ',')
                }

                Text("Broj lijekova s upisanom cijenom (po pakiranju): $packageCount")
                Text("Zbroj unesenih cijena (po pakiranju): ${fmt(sumPackagePrices)}")
                Text("Prosječna cijena (po pakiranju): ${fmt(avgPackagePrice)}")
                Text("Najniža / Najviša cijena (po pakiranju): ${fmt(minPackage)} / ${fmt(maxPackage)}")

                Spacer(modifier = Modifier.height(4.dp))
                Text("Prosječna cijena po jedinici: ${fmt(avgUnitPrice)}", style = MaterialTheme.typography.bodySmall)
                Text("Ukupna vrijednost zaliha (pretpostavka: cijena je za pakiranje): ${fmt(totalStockValue)}")

                if (packageCount == 0) {
                    Text("Nema unesenih cijena.", color = MaterialTheme.colorScheme.onSurfaceVariant)
                }
            }
        }
    }
}

@Composable
fun SettingsScreen(
    onExportImport: () -> Unit,
    modifier: Modifier = Modifier
) {
    val context = LocalContext.current

    // Notification enabled check
    val notificationsEnabled = remember { NotificationManagerCompat.from(context).areNotificationsEnabled() }

    // Load saved reminder times from SharedPreferences (format HH:mm)
    val prefs = remember { context.getSharedPreferences("e_lijekovi_prefs", Context.MODE_PRIVATE) }
    var jutroTime by remember { mutableStateOf(prefs.getString("reminder_jutro", "08:00") ?: "08:00") }
    var podneTime by remember { mutableStateOf(prefs.getString("reminder_podne", "14:00") ?: "14:00") }
    var vecerTime by remember { mutableStateOf(prefs.getString("reminder_vecer", "20:00") ?: "20:00") }

    var showTimePickerJutro by remember { mutableStateOf(false) }
    var showTimePickerPodne by remember { mutableStateOf(false) }
    var showTimePickerVecer by remember { mutableStateOf(false) }

    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            "Postavke",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Button(
            onClick = onExportImport,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Upravljanje podacima")
        }

        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 1.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)
                )
                .clip(RoundedCornerShape(12.dp)),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    "ℹ️ Pomoć za Import",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text(
                    "• Datoteka mora biti .json format\n" +
                    "• JSON mora biti array [ ... ]\n" +
                    "• Struktura mora odgovarati Lijek klasi\n" +
                    "• Koristite 'Export/Import' za provjeru",
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }

        // Podsjetnici card
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 1.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.06f)
                )
                .clip(RoundedCornerShape(12.dp)),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(modifier = Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
                Text("🔔 Podsjetnici", style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)
                Text("Podesi vrijeme za jutarnju, podnevnu i večernju notifikaciju.")

                // Notification status row
                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {
                    Column(modifier = Modifier.weight(1f)) {
                        Text("Status notifikacija", fontWeight = FontWeight.Medium)
                        Text(if (notificationsEnabled) "Uključeno" else "Isključeno", color = if (notificationsEnabled) MaterialTheme.colorScheme.primary else Color.Red)
                    }
                    Button(onClick = {
                        // Open app notification settings
                        val intent = Intent().apply {
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                action = Settings.ACTION_APP_NOTIFICATION_SETTINGS
                                putExtra(Settings.EXTRA_APP_PACKAGE, context.packageName)
                            } else {
                                action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS
                                data = Uri.fromParts("package", context.packageName, null)
                            }
                        }
                        context.startActivity(intent)
                    }) {
                        Text("Otvori postavke")
                    }
                }

                // Jutro row
                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {
                    Column(modifier = Modifier.weight(1f)) {
                        Text("Jutro", fontWeight = FontWeight.Medium)
                        Text(jutroTime, color = MaterialTheme.colorScheme.onSurfaceVariant)
                    }
                    Button(onClick = { showTimePickerJutro = true }) { Text("Odaberi") }
                }

                // Podne row
                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {
                    Column(modifier = Modifier.weight(1f)) {
                        Text("Podne", fontWeight = FontWeight.Medium)
                        Text(podneTime, color = MaterialTheme.colorScheme.onSurfaceVariant)
                    }
                    Button(onClick = { showTimePickerPodne = true }) { Text("Odaberi") }
                }

                // Večer row
                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {
                    Column(modifier = Modifier.weight(1f)) {
                        Text("Večer", fontWeight = FontWeight.Medium)
                        Text(vecerTime, color = MaterialTheme.colorScheme.onSurfaceVariant)
                    }
                    Button(onClick = { showTimePickerVecer = true }) { Text("Odaberi") }
                }

                Spacer(modifier = Modifier.height(4.dp))
                Text("Napomena: Ovdje se postavlja vrijeme podsjetnika; sama zakazivanja notifikacija/alarma bit će implementirana zasebno.", style = MaterialTheme.typography.bodySmall)
            }
        }
    }

    // Time pickers implemented as AlertDialog with AndroidView TimePicker (reused pattern)
    if (showTimePickerJutro) {
        AlertDialog(
            onDismissRequest = { showTimePickerJutro = false },
            confirmButton = {
                TextButton(onClick = { showTimePickerJutro = false }) { Text("Zatvori") }
            },
            text = {
                val parts = jutroTime.split(":")
                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 8
                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0
                AndroidView(
                    factory = { ctx ->
                        android.widget.TimePicker(ctx).apply {
                            setIs24HourView(true)
                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}
                            this.hour = hour
                            this.minute = minute
                            setOnTimeChangedListener { _, h, m ->
                                val hh = if (h < 10) "0$h" else "$h"
                                val mm = if (m < 10) "0$m" else "$m"
                                jutroTime = "$hh:$mm"
                                prefs.edit().putString("reminder_jutro", jutroTime).apply()
                                // Schedule or reschedule the daily reminder
                                NotificationScheduler.scheduleDailyReminder(context, jutroTime, "Jutro")
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        )
    }

    if (showTimePickerPodne) {
        AlertDialog(
            onDismissRequest = { showTimePickerPodne = false },
            confirmButton = {
                TextButton(onClick = { showTimePickerPodne = false }) { Text("Zatvori") }
            },
            text = {
                val parts = podneTime.split(":")
                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 14
                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0
                AndroidView(
                    factory = { ctx ->
                        android.widget.TimePicker(ctx).apply {
                            setIs24HourView(true)
                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}
                            this.hour = hour
                            this.minute = minute
                            setOnTimeChangedListener { _, h, m ->
                                val hh = if (h < 10) "0$h" else "$h"
                                val mm = if (m < 10) "0$m" else "$m"
                                podneTime = "$hh:$mm"
                                prefs.edit().putString("reminder_podne", podneTime).apply()
                                // Schedule or reschedule the daily reminder
                                NotificationScheduler.scheduleDailyReminder(context, podneTime, "Podne")
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        )
    }

    if (showTimePickerVecer) {
        AlertDialog(
            onDismissRequest = { showTimePickerVecer = false },
            confirmButton = {
                TextButton(onClick = { showTimePickerVecer = false }) { Text("Zatvori") }
            },
            text = {
                val parts = vecerTime.split(":")
                var hour = parts.getOrNull(0)?.toIntOrNull() ?: 20
                var minute = parts.getOrNull(1)?.toIntOrNull() ?: 0
                AndroidView(
                    factory = { ctx ->
                        android.widget.TimePicker(ctx).apply {
                            setIs24HourView(true)
                            try { hour = this.hour; minute = this.minute } catch (_: Throwable) {}
                            this.hour = hour
                            this.minute = minute
                            setOnTimeChangedListener { _, h, m ->
                                val hh = if (h < 10) "0$h" else "$h"
                                val mm = if (m < 10) "0$m" else "$m"
                                vecerTime = "$hh:$mm"
                                prefs.edit().putString("reminder_vecer", vecerTime).apply()
                                // Schedule or reschedule the daily reminder
                                NotificationScheduler.scheduleDailyReminder(context, vecerTime, "Večer")
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PocetniEkran(context: Context? = null) {
    val lijekovi = remember { mutableStateListOf<Lijek>() }
    var idCounter by rememberSaveable { mutableIntStateOf(0) }
    var editLijek by remember { mutableStateOf<Lijek?>(null) }
    var showAddLijek by remember { mutableStateOf(false) }
    var showExportImportDialog by remember { mutableStateOf(false) }
    var showMessage by remember { mutableStateOf<String?>(null) }
    var currentScreen by remember { mutableStateOf("home") }
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }

    val saveData = {
        context?.let { ctx ->
            LijekoviDataManager.saveToLocalStorage(ctx, lijekovi)
        }
        Unit
    }

    // Enhanced add with highlight animation
    val handleAddLijek: (Lijek) -> Unit = { newLijek ->
        val lijekWithId = newLijek.copy(id = idCounter++)
        lijekovi.add(lijekWithId)
        saveData()
        showAddLijek = false

        scope.launch {
            snackbarHostState.showSnackbar(
                message = "Terapija '${newLijek.naziv}' dodana",
                actionLabel = "Uredi",
                duration = SnackbarDuration.Short
            ).also { result ->
                if (result == SnackbarResult.ActionPerformed) {
                    editLijek = lijekWithId
                }
            }

            // Clear highlight after animation
            kotlinx.coroutines.delay(1000)
        }
    }

    LaunchedEffect(Unit) {
        context?.let { ctx ->
            val loadedLijekovi = LijekoviDataManager.loadFromLocalStorage(ctx)
            if (loadedLijekovi != null && loadedLijekovi.isNotEmpty()) {
                lijekovi.clear()
                lijekovi.addAll(loadedLijekovi)
                idCounter = (loadedLijekovi.maxOfOrNull { it.id } ?: -1) + 1
            }
        }
    }

    val exportLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.CreateDocument("application/json")
    ) { uri ->
        uri?.let {
            context?.let { ctx ->
                val success = LijekoviDataManager.saveToFile(ctx, it, lijekovi)
                showMessage = if (success) "Podaci uspješno eksportirani!" else "Greška pri exportu!"
            }
        }
    }

    val importLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.OpenDocument()
    ) { uri ->
        uri?.let {
            context?.let { ctx ->
                try {
                    val importedLijekovi = LijekoviDataManager.loadFromFile(ctx, it)
                    if (importedLijekovi != null) {
                        lijekovi.clear()
                        lijekovi.addAll(importedLijekovi)
                        idCounter = (importedLijekovi.maxOfOrNull { lijek -> lijek.id } ?: -1) + 1
                        saveData()
                        currentScreen = "home"
                        showMessage = "✅ Podaci uspješno importirani!\n\nUčitano ${importedLijekovi.size} lijekova."
                    } else {
                        showMessage = """
                            ❌ Greška pri importu podataka!
                            
                            Mogući uzroci:
                            • Datoteka nije valjani JSON format
                            • JSON ne odgovara strukturi aplikacije  
                            • Datoteka je oštećena ili prazna
                            • Nema dozvolu za čitanje datoteke
                            
                            💡 Savjet: Pokušajte exportirati podatke iz aplikacije pa ih importirati nazad da testirate format.
                            
                            🔍 Za detaljne informacije provjerite Logcat (filtriraj: LijekoviDataManager)
                        """.trimIndent()
                    }
                } catch (e: Exception) {
                    showMessage = """
                        ❌ Neočekivana greška pri importu!
                        
                        Greška: ${e.message ?: "Nepoznata greška"}
                        
                        💡 Provjerite:
                        • Je li datoteka ispravno eksportirana iz aplikacije
                        • Imate li dozvolu za čitanje datoteke
                        • Nije li datoteka oštećena
                    """.trimIndent()
                }
            }
        }
    }

    showMessage?.let { message ->
        AlertDialog(
            onDismissRequest = { showMessage = null },
            title = { Text("Obavijest") },
            text = { Text(message) },
            confirmButton = {
                TextButton(onClick = { showMessage = null }) {
                    Text("U redu")
                }
            }
        )
    }

    if (showExportImportDialog) {
        AlertDialog(
            onDismissRequest = { showExportImportDialog = false },
            title = { Text("Upravljanje podacima") },
            text = {
                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    Text("Odaberite akciju:")
                }
            },
            confirmButton = {
                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    Button(
                        onClick = {
                            showExportImportDialog = false
                            exportLauncher.launch("lijekovi_backup.json")
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Exportaj podatke")
                    }
                    Button(
                        onClick = {
                            showExportImportDialog = false
                            importLauncher.launch(arrayOf("application/json"))
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Importaj podatke")
                    }
                    Button(
                        onClick = {
                            lijekovi.clear()
                            saveData()
                            showExportImportDialog = false
                            showMessage = "Svi podaci su uspješno obrisani!"
                        },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(containerColor = Color.Red)
                    ) {
                        Text("Obriši sve podatke", color = Color.White)
                    }
                }
            },
            dismissButton = {
                TextButton(onClick = { showExportImportDialog = false }) {
                Text("Odustani")
            }
        })
    }

    ModalNavigationDrawer(
        drawerState = drawerState,
        drawerContent = {
            ModalDrawerSheet {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                ) {
                    Text(
                        text = "e-LijekoviHR",
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.padding(vertical = 16.dp)
                    )

                    Divider(modifier = Modifier.padding(bottom = 8.dp))

                    NavigationDrawerItem(
                        icon = { Icon(Icons.Default.Home, contentDescription = "Početna") },
                        label = { Text("Početna") },
                        selected = currentScreen == "home",
                        onClick = {
                            currentScreen = "home"
                            scope.launch { drawerState.close() }
                        },
                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)
                    )

                    NavigationDrawerItem(
                        icon = { Icon(Icons.Default.Analytics, contentDescription = "Statistike") },
                        label = { Text("Statistike") },
                        selected = currentScreen == "statistics",
                        onClick = {
                            currentScreen = "statistics"
                            scope.launch { drawerState.close() }
                        },
                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)
                    )

                    NavigationDrawerItem(
                        icon = { Icon(Icons.Default.Settings, contentDescription = "Postavke") },
                        label = { Text("Postavke") },
                        selected = currentScreen == "settings",
                        onClick = {
                            currentScreen = "settings"
                            scope.launch { drawerState.close() }
                        },
                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)
                    )

                    NavigationDrawerItem(
                        icon = { Icon(Icons.Default.Info, contentDescription = "O aplikaciji") },
                        label = { Text("O aplikaciji") },
                        selected = currentScreen == "about",
                        onClick = {
                            currentScreen = "about"
                            scope.launch { drawerState.close() }
                        },
                        modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)
                    )
                }
            }
        }
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            when (currentScreen) {
                                "home" -> "Moji lijekovi"
                                "statistics" -> "Statistike"
                                "settings" -> "Postavke"
                                "about" -> "O aplikaciji"
                                else -> "e-LijekoviHR"
                            }
                        )
                    },
                    navigationIcon = {
                        IconButton(
                            onClick = {
                                scope.launch { drawerState.open() }
                            }
                        ) {
                            Icon(Icons.Default.Menu, contentDescription = "Menu")
                        }
                    }
                )
            },
            floatingActionButton = {
                if (currentScreen == "home") {
                    AnimatedFAB(
                        isExpanded = showAddLijek,
                        onClick = { showAddLijek = true }
                    )
                }
            },
            snackbarHost = {
                SnackbarHost(hostState = snackbarHostState)
            }
        ) { paddingValues ->
            when (currentScreen) {
                "home" -> {
                    HomeScreen(
                        lijekovi = lijekovi,
                        onTake = { lijek, dobaDana ->
                            val grupa = when (dobaDana) {
                                DobaDana.JUTRO -> DobaDana.JUTRO
                                DobaDana.POPODNE -> DobaDana.POPODNE
                                DobaDana.VECER -> DobaDana.VECER
                                else -> null
                            }
                            if (grupa != null && lijek.mozeUzeti(grupa)) {
                                lijekovi[lijekovi.indexOf(lijek)] = lijek.uzmiLijek(grupa)
                                saveData()
                                scope.launch {
                                    snackbarHostState.showSnackbar(
                                        "Uspješno uzeto: ${lijek.naziv}",
                                        duration = SnackbarDuration.Short
                                    )
                                }
                            } else {
                                scope.launch {
                                    snackbarHostState.showSnackbar(
                                        "Nije moguće uzeti dozu za ${lijek.naziv}",
                                        duration = SnackbarDuration.Short
                                    )
                                }
                            }
                        },
                        onEdit = { lijek -> editLijek = lijek },
                        modifier = Modifier.padding(paddingValues)
                    )
                }
                "statistics" -> {
                    StatisticsScreen(
                        lijekovi = lijekovi,
                        modifier = Modifier.padding(paddingValues)
                    )
                }
                "settings" -> {
                    SettingsScreen(
                        onExportImport = { showExportImportDialog = true },
                        modifier = Modifier.padding(paddingValues)
                    )
                }
                "about" -> {
                    AboutScreen(modifier = Modifier.padding(paddingValues))
                }
            }
        }
    }

    if (showAddLijek) {
        LijekDialog(
            lijek = null,
            onDismiss = { showAddLijek = false },
            onSave = { newLijek ->
                 val duplicate = lijekovi.any {
                     it.naziv.lowercase() == newLijek.naziv.lowercase()
                 }

                 if (duplicate) {
                     scope.launch {
                         snackbarHostState.showSnackbar(
                             message = "Lijek '${newLijek.naziv}' već postoji!",
                             duration = SnackbarDuration.Short
                         )
                     }
                     return@LijekDialog
                 }

                 handleAddLijek(newLijek)
             }
            , onDelete = { /* no-op for add dialog */ }
        )
     }

     editLijek?.let { lijek ->
         LijekDialog(
             lijek = lijek,
             onDismiss = { editLijek = null },
             onSave = { updatedLijek ->
                 val duplicate = lijekovi.any {
                     it.id != lijek.id && it.naziv.lowercase() == updatedLijek.naziv.lowercase()
                 }

                 if (duplicate) {
                     scope.launch {
                         snackbarHostState.showSnackbar(
                             message = "Lijek '${updatedLijek.naziv}' već postoji!",
                             duration = SnackbarDuration.Short
                         )
                     }
                     return@LijekDialog
                 }

                 val index = lijekovi.indexOfFirst { it.id == lijek.id }
                 if (index != -1) {
                     lijekovi[index] = updatedLijek
                     saveData()

                     scope.launch {
                         snackbarHostState.showSnackbar(
                             message = "Lijek '${updatedLijek.naziv}' ažuriran",
                             duration = SnackbarDuration.Short
                         )
                     }
                 }
                 editLijek = null
             },
             onDelete = { deletedLijek ->
                 val idx = lijekovi.indexOfFirst { it.id == deletedLijek.id }
                 if (idx != -1) {
                     // Remove and keep a reference to the removed item so we can restore it on Undo
                     val removed = lijekovi.removeAt(idx)
                     saveData()
                     scope.launch {
                         // Show snackbar with 'Poništi' action to allow undoing the delete
                         val result = snackbarHostState.showSnackbar(
                             message = "Lijek '${removed.naziv}' obrisan",
                             actionLabel = "Poništi",
                             duration = SnackbarDuration.Short
                         )

                         if (result == SnackbarResult.ActionPerformed) {
                             // Reinsert the removed item at its previous index (or end if index out of range)
                             val insertIndex = if (idx <= lijekovi.size) idx else lijekovi.size
                             lijekovi.add(insertIndex, removed)
                             saveData()
                         }
                     }
                 }
                 editLijek = null
             }
         )
     }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AnimatedFAB(
    isExpanded: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    val rotation by animateFloatAsState(
        targetValue = if (isExpanded) 45f else 0f,
        animationSpec = spring(
            dampingRatio = Spring.DampingRatioMediumBouncy,
            stiffness = Spring.StiffnessMedium
        ),
        label = "fab_rotation"
    )

    FloatingActionButton(
        onClick = onClick,
        modifier = modifier,
        containerColor = MaterialTheme.colorScheme.primary
    ) {
        Icon(
            imageVector = Icons.Default.Add,
            contentDescription = "Dodaj lijek",
            modifier = Modifier.graphicsLayer(rotationZ = rotation)
        )
    }
}

@Composable
fun HomeScreen(
    lijekovi: List<Lijek>,
    onTake: (Lijek, DobaDana?) -> Unit,
    onEdit: (Lijek) -> Unit,
    modifier: Modifier = Modifier,
    scaffoldPadding: PaddingValues = PaddingValues(0.dp)
) {
    val localContext = LocalContext.current

    val reorderTotal = remember(lijekovi) {
        var totalCost = 0.0
        for (l in lijekovi) {
            // parse unitsPerDose from `doza` (first integer found), default 1
            val unitsPerDose = l.doza.trim().let { d -> Regex("\\d+").find(d)?.value?.toIntOrNull() ?: 1 }

            // determine doses per day
            val dosesPerDay = when (l.tipUzimanja) {
                TipUzimanja.STANDARDNO -> {
                    val stdTimes = listOf(l.jutro, l.popodne, l.vecer).count { it }
                    if (stdTimes > 0) stdTimes.toDouble() else 1.0
                }
                TipUzimanja.INTERVALNO -> {
                    val interval = l.intervalnoUzimanje?.intervalSati ?: 0
                    if (interval > 0) 24.0 / interval else 1.0
                }
            }

            val dailyConsumption = unitsPerDose * dosesPerDay
            val daysRemaining = if (dailyConsumption > 0.0) l.trenutnoStanje.toDouble() / dailyConsumption else Double.POSITIVE_INFINITY

            // 'Žuti' rules:
            // - stock units <= 7 (direct count)
            // - if units per dose >=2 ("duplo"), also treat <=14 units as warning
            // - OR estimated days remaining <= 7
            val isYellow = (l.trenutnoStanje <= 7) || (unitsPerDose >= 2 && l.trenutnoStanje <= 14) || (daysRemaining <= 7.0)

            if (isYellow) {
                val price = l.cijena.replace(',', '.').toDoubleOrNull() ?: 0.0
                totalCost += price
            }
        }
        totalCost
    }

    val grupe = listOf(
        DobaDana.JUTRO to "Jutro",
        DobaDana.POPODNE to "Podne",
        DobaDana.VECER to "Večer"
    )
    val skipSnackbarOnTakeAll = remember { mutableStateOf(false) }
    LazyColumn(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(18.dp),
        contentPadding = PaddingValues(
            bottom = scaffoldPadding.calculateBottomPadding()
                + WindowInsets.navigationBars.asPaddingValues().calculateBottomPadding()
                + 16.dp // internal margin
        )
    ) {
        // show reorder summary as first item
        item {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(elevation = 2.dp, shape = RoundedCornerShape(12.dp))
                    .clip(RoundedCornerShape(12.dp)),
                elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)
            ) {
                Column(modifier = Modifier.padding(12.dp)) {
                    val fmt = { v: Double -> String.format(java.util.Locale.getDefault(), "%.2f €", v).replace('.', ',') }
                    Text("🛒 Ukupno za narudžbu: ${fmt(reorderTotal)}", fontWeight = FontWeight.Bold)
                }
            }
        }

        grupe.forEach { (doba, naziv) ->
            val grupaLijekova = lijekovi.filter {
                when (doba) {
                    DobaDana.JUTRO -> it.jutro
                    DobaDana.POPODNE -> it.popodne
                    DobaDana.VECER -> it.vecer
                }
            }
            if (grupaLijekova.isNotEmpty()) {
                item {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 10.dp)
                    ) {
                        val ikona = when (doba) {
                            DobaDana.JUTRO -> Icons.Default.WbSunny
                            DobaDana.POPODNE -> Icons.Default.WbTwilight
                            DobaDana.VECER -> Icons.Default.NightsStay
                        }
                        Icon(
                            imageVector = ikona,
                            contentDescription = naziv,
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(28.dp).padding(end = 10.dp)
                        )
                        Text(
                            text = naziv,
                            style = MaterialTheme.typography.titleLarge,
                            color = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.padding(end = 12.dp)
                        )
                        Spacer(modifier = Modifier.weight(1f))
                        val mozeUzetiNetko = grupaLijekova.any { it.mozeUzeti(doba) && !it.jeUzetZaDanas() && it.trenutnoStanje > 0 }
                        Button(
                            onClick = {
                                skipSnackbarOnTakeAll.value = true
                                var takenCount = 0
                                grupaLijekova.forEach {
                                    if (it.mozeUzeti(doba) && !it.jeUzetZaDanas() && it.trenutnoStanje > 0) {
                                        onTake(it, doba)
                                        takenCount++
                                    }
                                }
                                skipSnackbarOnTakeAll.value = false

                                if (takenCount > 0) {
                                    NotificationScheduler.sendTherapyTakenNotification(localContext, naziv)
                                }
                            },
                            enabled = mozeUzetiNetko,
                            modifier = Modifier
                                .height(38.dp)
                                .padding(vertical = 2.dp)
                        ) {
                            Text("Uzmi sve", fontSize = 15.sp)
                        }
                    }
                }
                items(grupaLijekova.size) { idx ->
                    val lijek = grupaLijekova[idx]
                    Box(modifier = Modifier.clickable { onEdit(lijek) }) {
                        LijekCard(
                            lijek = lijek,
                            onTake = {
                                if (!skipSnackbarOnTakeAll.value) onTake(lijek, doba)
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .then(if (idx == grupaLijekova.lastIndex) Modifier.padding(bottom = 16.dp) else Modifier)
                        )
                    }
                }
            }
        }

        val intervalniLijekovi = lijekovi.filter { it.tipUzimanja == TipUzimanja.INTERVALNO }
        if (intervalniLijekovi.isNotEmpty()) {
            item {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 10.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.Schedule,
                        contentDescription = "Intervalno",
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(28.dp).padding(end = 10.dp)
                    )
                    Text(
                        text = "Intervalno",
                        style = MaterialTheme.typography.titleLarge,
                        color = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.padding(end = 12.dp)
                    )
                }
            }
            items(intervalniLijekovi.size) { idx ->
                val lijek = intervalniLijekovi[idx]
                Box(modifier = Modifier.clickable { onEdit(lijek) }) {
                    LijekCard(
                        lijek = lijek,
                        onTake = {
                            if (!skipSnackbarOnTakeAll.value) onTake(lijek, null)
                        },
                        modifier = Modifier.fillMaxWidth()
                    )
                }
            }
        }

        val ostaliLijekovi = lijekovi.filter { !it.jutro && !it.popodne && !it.vecer && it.tipUzimanja != TipUzimanja.INTERVALNO }
        if (ostaliLijekovi.isNotEmpty()) {
            item {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 10.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.MedicalServices,
                        contentDescription = "Ostali",
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(28.dp).padding(end = 10.dp)
                    )
                    Text(
                        text = "Ostali",
                        style = MaterialTheme.typography.titleLarge,
                        color = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.padding(end = 12.dp)
                    )
                }
            }
            items(ostaliLijekovi.size) { idx ->
                val lijek = ostaliLijekovi[idx]
                Box(modifier = Modifier.clickable { onEdit(lijek) }) {
                    LijekCard(
                        lijek = lijek,
                        onTake = {
                            if (!skipSnackbarOnTakeAll.value) onTake(lijek, null)
                        },
                        modifier = Modifier.fillMaxWidth()
                    )
                }
            }
        }
    }
}

@Composable
fun AboutScreen(modifier: Modifier = Modifier) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            "O aplikaciji",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 2.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)
                )
                .clip(RoundedCornerShape(12.dp)),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    "e-LijekoviHR",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text("Verzija: ${"1.1.1"}")
                Text("Hrvatska aplikacija za praćenje lijekova")
                Spacer(modifier = Modifier.height(8.dp))
                Text("Značajke:")
                Text("• Praćenje standardnih lijekova")
                Text("• Napredni intervalni doziranje")
                Text("• Compliance statistike")
                Text("• Export/Import podataka")
            }
        }
    }
}
